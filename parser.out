Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM first_cuadruplo ID var_declaration function_declaration rellena_cuadruplo main_declaration
Rule 2     first_cuadruplo -> <empty>
Rule 3     var_declaration -> INT variable_ent_list var_declaration
Rule 4     var_declaration -> FLOAT variable_float_list var_declaration
Rule 5     var_declaration -> ARRINT variable_arrint_list var_declaration
Rule 6     var_declaration -> empty
Rule 7     variable_ent_list -> ID SEMMICOLON
Rule 8     variable_ent_list -> ID COMMA variable_ent_list
Rule 9     variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON
Rule 10    variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list
Rule 11    variable_float_list -> ID SEMMICOLON
Rule 12    variable_float_list -> ID COMMA variable_float_list
Rule 13    variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON
Rule 14    variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list
Rule 15    variable_arrint_list -> ID LSQUARE sexp RSQUARE SEMMICOLON
Rule 16    variable_arrint_list -> ID LSQUARE sexp RSQUARE COMMA variable_arrint_list
Rule 17    variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON
Rule 18    variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list
Rule 19    function_declaration -> function_1 function_declaration
Rule 20    function_declaration -> empty
Rule 21    function_1 -> FUNCTION ID LPAREN RPAREN function_cuad_1 LKEY estatuto RKEY
Rule 22    function_cuad_1 -> <empty>
Rule 23    main_declaration -> MAIN LPAREN RPAREN LKEY estatuto RKEY
Rule 24    rellena_cuadruplo -> <empty>
Rule 25    estatuto -> ciclo_for estatuto
Rule 26    estatuto -> ciclo_if estatuto
Rule 27    estatuto -> ciclo_while estatuto
Rule 28    estatuto -> read_process estatuto
Rule 29    estatuto -> print_process estatuto
Rule 30    estatuto -> id_asignacion estatuto
Rule 31    estatuto -> id SEMMICOLON estatuto
Rule 32    estatuto -> ret_process estatuto
Rule 33    estatuto -> plus_plus estatuto
Rule 34    estatuto -> minus_minus estatuto
Rule 35    estatuto -> empty
Rule 36    plus_plus -> id plus_plus_continua
Rule 37    plus_plus_continua -> PLUSPLUS SEMMICOLON
Rule 38    plus_plus_continua -> PLUSPLUS
Rule 39    minus_minus -> id minus_minus_continua
Rule 40    minus_minus_continua -> MINUSMINUS SEMMICOLON
Rule 41    ret_process -> RETURN SEMMICOLON
Rule 42    print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON
Rule 43    print_1 -> id print_aux_1 print_prima_1
Rule 44    print_1 -> string_type print_aux_2 print_prima_1
Rule 45    print_aux_1 -> <empty>
Rule 46    print_aux_2 -> <empty>
Rule 47    print_prima_1 -> COMMA print_prima_2 print_1
Rule 48    print_prima_1 -> empty print_prima_2
Rule 49    print_prima_2 -> <empty>
Rule 50    read_process -> READ LPAREN sexp RPAREN SEMMICOLON
Rule 51    id_asignacion -> id id_asignacion_prima
Rule 52    id_asignacion_prima -> ASSIGN sexp SEMMICOLON
Rule 53    id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON
Rule 54    id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON
Rule 55    ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
Rule 56    ciclo_for_1 -> <empty>
Rule 57    ciclo_for_2 -> <empty>
Rule 58    ciclo_for_3 -> <empty>
Rule 59    ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
Rule 60    ciclo_while_1 -> <empty>
Rule 61    ciclo_while_2 -> <empty>
Rule 62    ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
Rule 63    ciclo_if_1 -> <empty>
Rule 64    if_else -> ELSE LKEY if_else_1 estatuto RKEY
Rule 65    if_else -> empty
Rule 66    if_else_1 -> <empty>
Rule 67    sexp -> cuadruplo_1 sexprima
Rule 68    cuadruplo_1 -> expression
Rule 69    sexprima -> AND push_operator sexp
Rule 70    sexprima -> OR push_operator sexp
Rule 71    sexprima -> empty
Rule 72    expression -> cuadruplo_2 expressionp
Rule 73    cuadruplo_2 -> exp
Rule 74    expressionp -> LT push_operator expression
Rule 75    expressionp -> GT push_operator expression
Rule 76    expressionp -> LTEQ push_operator expression
Rule 77    expressionp -> GTEQ push_operator expression
Rule 78    expressionp -> EQ push_operator expression
Rule 79    expressionp -> NEQ push_operator expression
Rule 80    expressionp -> empty
Rule 81    exp -> cuadruplo_3 expp
Rule 82    cuadruplo_3 -> term
Rule 83    expp -> PLUS push_operator exp
Rule 84    expp -> MINUS push_operator exp
Rule 85    expp -> empty
Rule 86    term -> cuadruplo_4 termp
Rule 87    cuadruplo_4 -> factor
Rule 88    termp -> DIVISION push_operator term
Rule 89    termp -> TIMES push_operator term
Rule 90    termp -> empty
Rule 91    push_operator -> <empty>
Rule 92    factor -> cons
Rule 93    factor -> LPAREN push_operator sexp RPAREN pop_parentesis
Rule 94    factor -> empty
Rule 95    pop_parentesis -> <empty>
Rule 96    cons -> id
Rule 97    cons -> NUMINT int_type
Rule 98    cons -> NUMFLOAT float_type
Rule 99    int_type -> <empty>
Rule 100   float_type -> <empty>
Rule 101   string_type -> CTES
Rule 102   id -> ID idp
Rule 103   idp -> LSQUARE sexp RSQUARE
Rule 104   idp -> array_2d
Rule 105   idp -> LPAREN RPAREN
Rule 106   idp -> empty
Rule 107   array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE
Rule 108   empty -> <empty>

Terminals, with rules where they appear

AND                  : 69
ARRINT               : 5
ASSIGN               : 9 10 13 14 52 53 54 55
COMMA                : 8 10 12 14 16 18 47
CTES                 : 101
DIVISION             : 88
ELSE                 : 64
EQ                   : 78
FLOAT                : 4
FOR                  : 55
FUNCTION             : 21
GT                   : 75
GTEQ                 : 77
ID                   : 1 7 8 9 10 11 12 13 14 15 16 17 18 21 102
IF                   : 62
INT                  : 3
LKEY                 : 21 23 55 59 62 64
LPAREN               : 21 23 42 50 55 59 62 93 105
LSQUARE              : 15 16 17 17 18 18 53 54 54 103 107 107
LT                   : 74
LTEQ                 : 76
MAIN                 : 23
MINUS                : 84
MINUSMINUS           : 40
NEQ                  : 79
NUMFLOAT             : 13 14 98
NUMINT               : 9 10 97
OR                   : 70
PLUS                 : 83
PLUSPLUS             : 37 38
PRINT                : 42
PROGRAM              : 1
READ                 : 50
RETURN               : 41
RKEY                 : 21 23 55 59 62 64
RPAREN               : 21 23 42 50 55 59 62 93 105
RSQUARE              : 15 16 17 17 18 18 53 54 54 103 107 107
SEMMICOLON           : 7 9 11 13 15 17 31 37 40 41 42 50 52 53 54 55 55
TIMES                : 89
WHILE                : 59
error                : 

Nonterminals, with rules where they appear

array_2d             : 104
ciclo_for            : 25
ciclo_for_1          : 55
ciclo_for_2          : 55
ciclo_for_3          : 55
ciclo_if             : 26
ciclo_if_1           : 62
ciclo_while          : 27
ciclo_while_1        : 59
ciclo_while_2        : 59
cons                 : 92
cuadruplo_1          : 67
cuadruplo_2          : 72
cuadruplo_3          : 81
cuadruplo_4          : 86
empty                : 6 20 35 48 65 71 80 85 90 94 106
estatuto             : 21 23 25 26 27 28 29 30 31 32 33 34 55 55 59 62 64
exp                  : 73 83 84
expp                 : 81
expression           : 68 74 75 76 77 78 79
expressionp          : 72
factor               : 87
first_cuadruplo      : 1
float_type           : 98
function_1           : 19
function_cuad_1      : 21
function_declaration : 1 19
id                   : 31 36 39 43 51 55 96
id_asignacion        : 30
id_asignacion_prima  : 51
idp                  : 102
if_else              : 62
if_else_1            : 64
int_type             : 97
main_declaration     : 1
minus_minus          : 34
minus_minus_continua : 39
plus_plus            : 33
plus_plus_continua   : 36
pop_parentesis       : 93
print_1              : 42 47
print_aux_1          : 43
print_aux_2          : 44
print_prima_1        : 43 44
print_prima_2        : 47 48
print_process        : 29
programa             : 0
push_operator        : 69 70 74 75 76 77 78 79 83 84 88 89 93
read_process         : 28
rellena_cuadruplo    : 1
ret_process          : 32
sexp                 : 15 16 17 17 18 18 50 52 53 53 54 54 54 55 55 59 62 69 70 93 103 107 107
sexprima             : 67
string_type          : 44
term                 : 82 88 89
termp                : 86
var_declaration      : 1 3 4 5
variable_arrint_list : 5 16 18
variable_ent_list    : 3 8 10
variable_float_list  : 4 12 14

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM first_cuadruplo ID var_declaration function_declaration rellena_cuadruplo main_declaration

    PROGRAM         shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> PROGRAM . first_cuadruplo ID var_declaration function_declaration rellena_cuadruplo main_declaration
    (2) first_cuadruplo -> .

    ID              reduce using rule 2 (first_cuadruplo -> .)

    first_cuadruplo                shift and go to state 3

state 2

    (0) S' -> programa .



state 3

    (1) programa -> PROGRAM first_cuadruplo . ID var_declaration function_declaration rellena_cuadruplo main_declaration

    ID              shift and go to state 4


state 4

    (1) programa -> PROGRAM first_cuadruplo ID . var_declaration function_declaration rellena_cuadruplo main_declaration
    (3) var_declaration -> . INT variable_ent_list var_declaration
    (4) var_declaration -> . FLOAT variable_float_list var_declaration
    (5) var_declaration -> . ARRINT variable_arrint_list var_declaration
    (6) var_declaration -> . empty
    (108) empty -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 6
    ARRINT          shift and go to state 5
    FUNCTION        reduce using rule 108 (empty -> .)
    MAIN            reduce using rule 108 (empty -> .)

    var_declaration                shift and go to state 7
    empty                          shift and go to state 9

state 5

    (5) var_declaration -> ARRINT . variable_arrint_list var_declaration
    (15) variable_arrint_list -> . ID LSQUARE sexp RSQUARE SEMMICOLON
    (16) variable_arrint_list -> . ID LSQUARE sexp RSQUARE COMMA variable_arrint_list
    (17) variable_arrint_list -> . ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON
    (18) variable_arrint_list -> . ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list

    ID              shift and go to state 11

    variable_arrint_list           shift and go to state 10

state 6

    (4) var_declaration -> FLOAT . variable_float_list var_declaration
    (11) variable_float_list -> . ID SEMMICOLON
    (12) variable_float_list -> . ID COMMA variable_float_list
    (13) variable_float_list -> . ID ASSIGN NUMFLOAT SEMMICOLON
    (14) variable_float_list -> . ID ASSIGN NUMFLOAT COMMA variable_float_list

    ID              shift and go to state 13

    variable_float_list            shift and go to state 12

state 7

    (1) programa -> PROGRAM first_cuadruplo ID var_declaration . function_declaration rellena_cuadruplo main_declaration
    (19) function_declaration -> . function_1 function_declaration
    (20) function_declaration -> . empty
    (21) function_1 -> . FUNCTION ID LPAREN RPAREN function_cuad_1 LKEY estatuto RKEY
    (108) empty -> .

    FUNCTION        shift and go to state 14
    MAIN            reduce using rule 108 (empty -> .)

    function_declaration           shift and go to state 15
    function_1                     shift and go to state 16
    empty                          shift and go to state 17

state 8

    (3) var_declaration -> INT . variable_ent_list var_declaration
    (7) variable_ent_list -> . ID SEMMICOLON
    (8) variable_ent_list -> . ID COMMA variable_ent_list
    (9) variable_ent_list -> . ID ASSIGN NUMINT SEMMICOLON
    (10) variable_ent_list -> . ID ASSIGN NUMINT COMMA variable_ent_list

    ID              shift and go to state 19

    variable_ent_list              shift and go to state 18

state 9

    (6) var_declaration -> empty .

    FUNCTION        reduce using rule 6 (var_declaration -> empty .)
    MAIN            reduce using rule 6 (var_declaration -> empty .)


state 10

    (5) var_declaration -> ARRINT variable_arrint_list . var_declaration
    (3) var_declaration -> . INT variable_ent_list var_declaration
    (4) var_declaration -> . FLOAT variable_float_list var_declaration
    (5) var_declaration -> . ARRINT variable_arrint_list var_declaration
    (6) var_declaration -> . empty
    (108) empty -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 6
    ARRINT          shift and go to state 5
    FUNCTION        reduce using rule 108 (empty -> .)
    MAIN            reduce using rule 108 (empty -> .)

    var_declaration                shift and go to state 20
    empty                          shift and go to state 9

state 11

    (15) variable_arrint_list -> ID . LSQUARE sexp RSQUARE SEMMICOLON
    (16) variable_arrint_list -> ID . LSQUARE sexp RSQUARE COMMA variable_arrint_list
    (17) variable_arrint_list -> ID . LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON
    (18) variable_arrint_list -> ID . LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list

    LSQUARE         shift and go to state 21


state 12

    (4) var_declaration -> FLOAT variable_float_list . var_declaration
    (3) var_declaration -> . INT variable_ent_list var_declaration
    (4) var_declaration -> . FLOAT variable_float_list var_declaration
    (5) var_declaration -> . ARRINT variable_arrint_list var_declaration
    (6) var_declaration -> . empty
    (108) empty -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 6
    ARRINT          shift and go to state 5
    FUNCTION        reduce using rule 108 (empty -> .)
    MAIN            reduce using rule 108 (empty -> .)

    var_declaration                shift and go to state 22
    empty                          shift and go to state 9

state 13

    (11) variable_float_list -> ID . SEMMICOLON
    (12) variable_float_list -> ID . COMMA variable_float_list
    (13) variable_float_list -> ID . ASSIGN NUMFLOAT SEMMICOLON
    (14) variable_float_list -> ID . ASSIGN NUMFLOAT COMMA variable_float_list

    SEMMICOLON      shift and go to state 23
    COMMA           shift and go to state 24
    ASSIGN          shift and go to state 25


state 14

    (21) function_1 -> FUNCTION . ID LPAREN RPAREN function_cuad_1 LKEY estatuto RKEY

    ID              shift and go to state 26


state 15

    (1) programa -> PROGRAM first_cuadruplo ID var_declaration function_declaration . rellena_cuadruplo main_declaration
    (24) rellena_cuadruplo -> .

    MAIN            reduce using rule 24 (rellena_cuadruplo -> .)

    rellena_cuadruplo              shift and go to state 27

state 16

    (19) function_declaration -> function_1 . function_declaration
    (19) function_declaration -> . function_1 function_declaration
    (20) function_declaration -> . empty
    (21) function_1 -> . FUNCTION ID LPAREN RPAREN function_cuad_1 LKEY estatuto RKEY
    (108) empty -> .

    FUNCTION        shift and go to state 14
    MAIN            reduce using rule 108 (empty -> .)

    empty                          shift and go to state 17
    function_declaration           shift and go to state 28
    function_1                     shift and go to state 16

state 17

    (20) function_declaration -> empty .

    MAIN            reduce using rule 20 (function_declaration -> empty .)


state 18

    (3) var_declaration -> INT variable_ent_list . var_declaration
    (3) var_declaration -> . INT variable_ent_list var_declaration
    (4) var_declaration -> . FLOAT variable_float_list var_declaration
    (5) var_declaration -> . ARRINT variable_arrint_list var_declaration
    (6) var_declaration -> . empty
    (108) empty -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 6
    ARRINT          shift and go to state 5
    FUNCTION        reduce using rule 108 (empty -> .)
    MAIN            reduce using rule 108 (empty -> .)

    var_declaration                shift and go to state 29
    empty                          shift and go to state 9

state 19

    (7) variable_ent_list -> ID . SEMMICOLON
    (8) variable_ent_list -> ID . COMMA variable_ent_list
    (9) variable_ent_list -> ID . ASSIGN NUMINT SEMMICOLON
    (10) variable_ent_list -> ID . ASSIGN NUMINT COMMA variable_ent_list

    SEMMICOLON      shift and go to state 31
    COMMA           shift and go to state 32
    ASSIGN          shift and go to state 30


state 20

    (5) var_declaration -> ARRINT variable_arrint_list var_declaration .

    FUNCTION        reduce using rule 5 (var_declaration -> ARRINT variable_arrint_list var_declaration .)
    MAIN            reduce using rule 5 (var_declaration -> ARRINT variable_arrint_list var_declaration .)


state 21

    (15) variable_arrint_list -> ID LSQUARE . sexp RSQUARE SEMMICOLON
    (16) variable_arrint_list -> ID LSQUARE . sexp RSQUARE COMMA variable_arrint_list
    (17) variable_arrint_list -> ID LSQUARE . sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON
    (18) variable_arrint_list -> ID LSQUARE . sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    cons                           shift and go to state 33
    id                             shift and go to state 36
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    factor                         shift and go to state 41
    empty                          shift and go to state 42
    sexp                           shift and go to state 43
    term                           shift and go to state 45
    exp                            shift and go to state 47
    expression                     shift and go to state 48

state 22

    (4) var_declaration -> FLOAT variable_float_list var_declaration .

    FUNCTION        reduce using rule 4 (var_declaration -> FLOAT variable_float_list var_declaration .)
    MAIN            reduce using rule 4 (var_declaration -> FLOAT variable_float_list var_declaration .)


state 23

    (11) variable_float_list -> ID SEMMICOLON .

    INT             reduce using rule 11 (variable_float_list -> ID SEMMICOLON .)
    FLOAT           reduce using rule 11 (variable_float_list -> ID SEMMICOLON .)
    ARRINT          reduce using rule 11 (variable_float_list -> ID SEMMICOLON .)
    FUNCTION        reduce using rule 11 (variable_float_list -> ID SEMMICOLON .)
    MAIN            reduce using rule 11 (variable_float_list -> ID SEMMICOLON .)


state 24

    (12) variable_float_list -> ID COMMA . variable_float_list
    (11) variable_float_list -> . ID SEMMICOLON
    (12) variable_float_list -> . ID COMMA variable_float_list
    (13) variable_float_list -> . ID ASSIGN NUMFLOAT SEMMICOLON
    (14) variable_float_list -> . ID ASSIGN NUMFLOAT COMMA variable_float_list

    ID              shift and go to state 13

    variable_float_list            shift and go to state 49

state 25

    (13) variable_float_list -> ID ASSIGN . NUMFLOAT SEMMICOLON
    (14) variable_float_list -> ID ASSIGN . NUMFLOAT COMMA variable_float_list

    NUMFLOAT        shift and go to state 50


state 26

    (21) function_1 -> FUNCTION ID . LPAREN RPAREN function_cuad_1 LKEY estatuto RKEY

    LPAREN          shift and go to state 51


state 27

    (1) programa -> PROGRAM first_cuadruplo ID var_declaration function_declaration rellena_cuadruplo . main_declaration
    (23) main_declaration -> . MAIN LPAREN RPAREN LKEY estatuto RKEY

    MAIN            shift and go to state 53

    main_declaration               shift and go to state 52

state 28

    (19) function_declaration -> function_1 function_declaration .

    MAIN            reduce using rule 19 (function_declaration -> function_1 function_declaration .)


state 29

    (3) var_declaration -> INT variable_ent_list var_declaration .

    FUNCTION        reduce using rule 3 (var_declaration -> INT variable_ent_list var_declaration .)
    MAIN            reduce using rule 3 (var_declaration -> INT variable_ent_list var_declaration .)


state 30

    (9) variable_ent_list -> ID ASSIGN . NUMINT SEMMICOLON
    (10) variable_ent_list -> ID ASSIGN . NUMINT COMMA variable_ent_list

    NUMINT          shift and go to state 54


state 31

    (7) variable_ent_list -> ID SEMMICOLON .

    INT             reduce using rule 7 (variable_ent_list -> ID SEMMICOLON .)
    FLOAT           reduce using rule 7 (variable_ent_list -> ID SEMMICOLON .)
    ARRINT          reduce using rule 7 (variable_ent_list -> ID SEMMICOLON .)
    FUNCTION        reduce using rule 7 (variable_ent_list -> ID SEMMICOLON .)
    MAIN            reduce using rule 7 (variable_ent_list -> ID SEMMICOLON .)


state 32

    (8) variable_ent_list -> ID COMMA . variable_ent_list
    (7) variable_ent_list -> . ID SEMMICOLON
    (8) variable_ent_list -> . ID COMMA variable_ent_list
    (9) variable_ent_list -> . ID ASSIGN NUMINT SEMMICOLON
    (10) variable_ent_list -> . ID ASSIGN NUMINT COMMA variable_ent_list

    ID              shift and go to state 19

    variable_ent_list              shift and go to state 55

state 33

    (92) factor -> cons .

    DIVISION        reduce using rule 92 (factor -> cons .)
    TIMES           reduce using rule 92 (factor -> cons .)
    PLUS            reduce using rule 92 (factor -> cons .)
    MINUS           reduce using rule 92 (factor -> cons .)
    LT              reduce using rule 92 (factor -> cons .)
    GT              reduce using rule 92 (factor -> cons .)
    LTEQ            reduce using rule 92 (factor -> cons .)
    GTEQ            reduce using rule 92 (factor -> cons .)
    EQ              reduce using rule 92 (factor -> cons .)
    NEQ             reduce using rule 92 (factor -> cons .)
    AND             reduce using rule 92 (factor -> cons .)
    OR              reduce using rule 92 (factor -> cons .)
    SEMMICOLON      reduce using rule 92 (factor -> cons .)
    RSQUARE         reduce using rule 92 (factor -> cons .)
    RPAREN          reduce using rule 92 (factor -> cons .)


state 34

    (93) factor -> LPAREN . push_operator sexp RPAREN pop_parentesis
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 56

state 35

    (98) cons -> NUMFLOAT . float_type
    (100) float_type -> .

    DIVISION        reduce using rule 100 (float_type -> .)
    TIMES           reduce using rule 100 (float_type -> .)
    PLUS            reduce using rule 100 (float_type -> .)
    MINUS           reduce using rule 100 (float_type -> .)
    LT              reduce using rule 100 (float_type -> .)
    GT              reduce using rule 100 (float_type -> .)
    LTEQ            reduce using rule 100 (float_type -> .)
    GTEQ            reduce using rule 100 (float_type -> .)
    EQ              reduce using rule 100 (float_type -> .)
    NEQ             reduce using rule 100 (float_type -> .)
    AND             reduce using rule 100 (float_type -> .)
    OR              reduce using rule 100 (float_type -> .)
    RSQUARE         reduce using rule 100 (float_type -> .)
    RPAREN          reduce using rule 100 (float_type -> .)
    SEMMICOLON      reduce using rule 100 (float_type -> .)

    float_type                     shift and go to state 57

state 36

    (96) cons -> id .

    DIVISION        reduce using rule 96 (cons -> id .)
    TIMES           reduce using rule 96 (cons -> id .)
    PLUS            reduce using rule 96 (cons -> id .)
    MINUS           reduce using rule 96 (cons -> id .)
    LT              reduce using rule 96 (cons -> id .)
    GT              reduce using rule 96 (cons -> id .)
    LTEQ            reduce using rule 96 (cons -> id .)
    GTEQ            reduce using rule 96 (cons -> id .)
    EQ              reduce using rule 96 (cons -> id .)
    NEQ             reduce using rule 96 (cons -> id .)
    AND             reduce using rule 96 (cons -> id .)
    OR              reduce using rule 96 (cons -> id .)
    SEMMICOLON      reduce using rule 96 (cons -> id .)
    RSQUARE         reduce using rule 96 (cons -> id .)
    RPAREN          reduce using rule 96 (cons -> id .)


state 37

    (86) term -> cuadruplo_4 . termp
    (88) termp -> . DIVISION push_operator term
    (89) termp -> . TIMES push_operator term
    (90) termp -> . empty
    (108) empty -> .

    DIVISION        shift and go to state 58
    TIMES           shift and go to state 60
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)

    empty                          shift and go to state 61
    termp                          shift and go to state 59

state 38

    (67) sexp -> cuadruplo_1 . sexprima
    (69) sexprima -> . AND push_operator sexp
    (70) sexprima -> . OR push_operator sexp
    (71) sexprima -> . empty
    (108) empty -> .

    AND             shift and go to state 62
    OR              shift and go to state 64
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)

    empty                          shift and go to state 65
    sexprima                       shift and go to state 63

state 39

    (81) exp -> cuadruplo_3 . expp
    (83) expp -> . PLUS push_operator exp
    (84) expp -> . MINUS push_operator exp
    (85) expp -> . empty
    (108) empty -> .

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)

    empty                          shift and go to state 69
    expp                           shift and go to state 66

state 40

    (72) expression -> cuadruplo_2 . expressionp
    (74) expressionp -> . LT push_operator expression
    (75) expressionp -> . GT push_operator expression
    (76) expressionp -> . LTEQ push_operator expression
    (77) expressionp -> . GTEQ push_operator expression
    (78) expressionp -> . EQ push_operator expression
    (79) expressionp -> . NEQ push_operator expression
    (80) expressionp -> . empty
    (108) empty -> .

    LT              shift and go to state 74
    GT              shift and go to state 70
    LTEQ            shift and go to state 73
    GTEQ            shift and go to state 71
    EQ              shift and go to state 72
    NEQ             shift and go to state 77
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)

    expressionp                    shift and go to state 75
    empty                          shift and go to state 76

state 41

    (87) cuadruplo_4 -> factor .

    DIVISION        reduce using rule 87 (cuadruplo_4 -> factor .)
    TIMES           reduce using rule 87 (cuadruplo_4 -> factor .)
    PLUS            reduce using rule 87 (cuadruplo_4 -> factor .)
    MINUS           reduce using rule 87 (cuadruplo_4 -> factor .)
    LT              reduce using rule 87 (cuadruplo_4 -> factor .)
    GT              reduce using rule 87 (cuadruplo_4 -> factor .)
    LTEQ            reduce using rule 87 (cuadruplo_4 -> factor .)
    GTEQ            reduce using rule 87 (cuadruplo_4 -> factor .)
    EQ              reduce using rule 87 (cuadruplo_4 -> factor .)
    NEQ             reduce using rule 87 (cuadruplo_4 -> factor .)
    AND             reduce using rule 87 (cuadruplo_4 -> factor .)
    OR              reduce using rule 87 (cuadruplo_4 -> factor .)
    RSQUARE         reduce using rule 87 (cuadruplo_4 -> factor .)
    RPAREN          reduce using rule 87 (cuadruplo_4 -> factor .)
    SEMMICOLON      reduce using rule 87 (cuadruplo_4 -> factor .)


state 42

    (94) factor -> empty .

    DIVISION        reduce using rule 94 (factor -> empty .)
    TIMES           reduce using rule 94 (factor -> empty .)
    PLUS            reduce using rule 94 (factor -> empty .)
    MINUS           reduce using rule 94 (factor -> empty .)
    LT              reduce using rule 94 (factor -> empty .)
    GT              reduce using rule 94 (factor -> empty .)
    LTEQ            reduce using rule 94 (factor -> empty .)
    GTEQ            reduce using rule 94 (factor -> empty .)
    EQ              reduce using rule 94 (factor -> empty .)
    NEQ             reduce using rule 94 (factor -> empty .)
    AND             reduce using rule 94 (factor -> empty .)
    OR              reduce using rule 94 (factor -> empty .)
    SEMMICOLON      reduce using rule 94 (factor -> empty .)
    RSQUARE         reduce using rule 94 (factor -> empty .)
    RPAREN          reduce using rule 94 (factor -> empty .)


state 43

    (15) variable_arrint_list -> ID LSQUARE sexp . RSQUARE SEMMICOLON
    (16) variable_arrint_list -> ID LSQUARE sexp . RSQUARE COMMA variable_arrint_list
    (17) variable_arrint_list -> ID LSQUARE sexp . RSQUARE LSQUARE sexp RSQUARE SEMMICOLON
    (18) variable_arrint_list -> ID LSQUARE sexp . RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list

    RSQUARE         shift and go to state 78


state 44

    (102) id -> ID . idp
    (103) idp -> . LSQUARE sexp RSQUARE
    (104) idp -> . array_2d
    (105) idp -> . LPAREN RPAREN
    (106) idp -> . empty
    (107) array_2d -> . LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE
    (108) empty -> .

  ! shift/reduce conflict for LSQUARE resolved as shift
    LSQUARE         shift and go to state 82
    LPAREN          shift and go to state 80
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ASSIGN          reduce using rule 108 (empty -> .)
    PLUSPLUS        reduce using rule 108 (empty -> .)
    MINUSMINUS      reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)

  ! LSQUARE         [ reduce using rule 108 (empty -> .) ]

    array_2d                       shift and go to state 79
    empty                          shift and go to state 83
    idp                            shift and go to state 81

state 45

    (82) cuadruplo_3 -> term .

    PLUS            reduce using rule 82 (cuadruplo_3 -> term .)
    MINUS           reduce using rule 82 (cuadruplo_3 -> term .)
    LT              reduce using rule 82 (cuadruplo_3 -> term .)
    GT              reduce using rule 82 (cuadruplo_3 -> term .)
    LTEQ            reduce using rule 82 (cuadruplo_3 -> term .)
    GTEQ            reduce using rule 82 (cuadruplo_3 -> term .)
    EQ              reduce using rule 82 (cuadruplo_3 -> term .)
    NEQ             reduce using rule 82 (cuadruplo_3 -> term .)
    AND             reduce using rule 82 (cuadruplo_3 -> term .)
    OR              reduce using rule 82 (cuadruplo_3 -> term .)
    RSQUARE         reduce using rule 82 (cuadruplo_3 -> term .)
    RPAREN          reduce using rule 82 (cuadruplo_3 -> term .)
    SEMMICOLON      reduce using rule 82 (cuadruplo_3 -> term .)


state 46

    (97) cons -> NUMINT . int_type
    (99) int_type -> .

    DIVISION        reduce using rule 99 (int_type -> .)
    TIMES           reduce using rule 99 (int_type -> .)
    PLUS            reduce using rule 99 (int_type -> .)
    MINUS           reduce using rule 99 (int_type -> .)
    LT              reduce using rule 99 (int_type -> .)
    GT              reduce using rule 99 (int_type -> .)
    LTEQ            reduce using rule 99 (int_type -> .)
    GTEQ            reduce using rule 99 (int_type -> .)
    EQ              reduce using rule 99 (int_type -> .)
    NEQ             reduce using rule 99 (int_type -> .)
    AND             reduce using rule 99 (int_type -> .)
    OR              reduce using rule 99 (int_type -> .)
    RSQUARE         reduce using rule 99 (int_type -> .)
    RPAREN          reduce using rule 99 (int_type -> .)
    SEMMICOLON      reduce using rule 99 (int_type -> .)

    int_type                       shift and go to state 84

state 47

    (73) cuadruplo_2 -> exp .

    LT              reduce using rule 73 (cuadruplo_2 -> exp .)
    GT              reduce using rule 73 (cuadruplo_2 -> exp .)
    LTEQ            reduce using rule 73 (cuadruplo_2 -> exp .)
    GTEQ            reduce using rule 73 (cuadruplo_2 -> exp .)
    EQ              reduce using rule 73 (cuadruplo_2 -> exp .)
    NEQ             reduce using rule 73 (cuadruplo_2 -> exp .)
    AND             reduce using rule 73 (cuadruplo_2 -> exp .)
    OR              reduce using rule 73 (cuadruplo_2 -> exp .)
    RSQUARE         reduce using rule 73 (cuadruplo_2 -> exp .)
    RPAREN          reduce using rule 73 (cuadruplo_2 -> exp .)
    SEMMICOLON      reduce using rule 73 (cuadruplo_2 -> exp .)


state 48

    (68) cuadruplo_1 -> expression .

    AND             reduce using rule 68 (cuadruplo_1 -> expression .)
    OR              reduce using rule 68 (cuadruplo_1 -> expression .)
    RSQUARE         reduce using rule 68 (cuadruplo_1 -> expression .)
    RPAREN          reduce using rule 68 (cuadruplo_1 -> expression .)
    SEMMICOLON      reduce using rule 68 (cuadruplo_1 -> expression .)


state 49

    (12) variable_float_list -> ID COMMA variable_float_list .

    INT             reduce using rule 12 (variable_float_list -> ID COMMA variable_float_list .)
    FLOAT           reduce using rule 12 (variable_float_list -> ID COMMA variable_float_list .)
    ARRINT          reduce using rule 12 (variable_float_list -> ID COMMA variable_float_list .)
    FUNCTION        reduce using rule 12 (variable_float_list -> ID COMMA variable_float_list .)
    MAIN            reduce using rule 12 (variable_float_list -> ID COMMA variable_float_list .)


state 50

    (13) variable_float_list -> ID ASSIGN NUMFLOAT . SEMMICOLON
    (14) variable_float_list -> ID ASSIGN NUMFLOAT . COMMA variable_float_list

    SEMMICOLON      shift and go to state 85
    COMMA           shift and go to state 86


state 51

    (21) function_1 -> FUNCTION ID LPAREN . RPAREN function_cuad_1 LKEY estatuto RKEY

    RPAREN          shift and go to state 87


state 52

    (1) programa -> PROGRAM first_cuadruplo ID var_declaration function_declaration rellena_cuadruplo main_declaration .

    $end            reduce using rule 1 (programa -> PROGRAM first_cuadruplo ID var_declaration function_declaration rellena_cuadruplo main_declaration .)


state 53

    (23) main_declaration -> MAIN . LPAREN RPAREN LKEY estatuto RKEY

    LPAREN          shift and go to state 88


state 54

    (9) variable_ent_list -> ID ASSIGN NUMINT . SEMMICOLON
    (10) variable_ent_list -> ID ASSIGN NUMINT . COMMA variable_ent_list

    SEMMICOLON      shift and go to state 89
    COMMA           shift and go to state 90


state 55

    (8) variable_ent_list -> ID COMMA variable_ent_list .

    INT             reduce using rule 8 (variable_ent_list -> ID COMMA variable_ent_list .)
    FLOAT           reduce using rule 8 (variable_ent_list -> ID COMMA variable_ent_list .)
    ARRINT          reduce using rule 8 (variable_ent_list -> ID COMMA variable_ent_list .)
    FUNCTION        reduce using rule 8 (variable_ent_list -> ID COMMA variable_ent_list .)
    MAIN            reduce using rule 8 (variable_ent_list -> ID COMMA variable_ent_list .)


state 56

    (93) factor -> LPAREN push_operator . sexp RPAREN pop_parentesis
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_2                    shift and go to state 40
    sexp                           shift and go to state 91
    cuadruplo_3                    shift and go to state 39
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 48
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 57

    (98) cons -> NUMFLOAT float_type .

    DIVISION        reduce using rule 98 (cons -> NUMFLOAT float_type .)
    TIMES           reduce using rule 98 (cons -> NUMFLOAT float_type .)
    PLUS            reduce using rule 98 (cons -> NUMFLOAT float_type .)
    MINUS           reduce using rule 98 (cons -> NUMFLOAT float_type .)
    LT              reduce using rule 98 (cons -> NUMFLOAT float_type .)
    GT              reduce using rule 98 (cons -> NUMFLOAT float_type .)
    LTEQ            reduce using rule 98 (cons -> NUMFLOAT float_type .)
    GTEQ            reduce using rule 98 (cons -> NUMFLOAT float_type .)
    EQ              reduce using rule 98 (cons -> NUMFLOAT float_type .)
    NEQ             reduce using rule 98 (cons -> NUMFLOAT float_type .)
    AND             reduce using rule 98 (cons -> NUMFLOAT float_type .)
    OR              reduce using rule 98 (cons -> NUMFLOAT float_type .)
    SEMMICOLON      reduce using rule 98 (cons -> NUMFLOAT float_type .)
    RSQUARE         reduce using rule 98 (cons -> NUMFLOAT float_type .)
    RPAREN          reduce using rule 98 (cons -> NUMFLOAT float_type .)


state 58

    (88) termp -> DIVISION . push_operator term
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 92

state 59

    (86) term -> cuadruplo_4 termp .

    PLUS            reduce using rule 86 (term -> cuadruplo_4 termp .)
    MINUS           reduce using rule 86 (term -> cuadruplo_4 termp .)
    LT              reduce using rule 86 (term -> cuadruplo_4 termp .)
    GT              reduce using rule 86 (term -> cuadruplo_4 termp .)
    LTEQ            reduce using rule 86 (term -> cuadruplo_4 termp .)
    GTEQ            reduce using rule 86 (term -> cuadruplo_4 termp .)
    EQ              reduce using rule 86 (term -> cuadruplo_4 termp .)
    NEQ             reduce using rule 86 (term -> cuadruplo_4 termp .)
    AND             reduce using rule 86 (term -> cuadruplo_4 termp .)
    OR              reduce using rule 86 (term -> cuadruplo_4 termp .)
    SEMMICOLON      reduce using rule 86 (term -> cuadruplo_4 termp .)
    RPAREN          reduce using rule 86 (term -> cuadruplo_4 termp .)
    RSQUARE         reduce using rule 86 (term -> cuadruplo_4 termp .)


state 60

    (89) termp -> TIMES . push_operator term
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 93

state 61

    (90) termp -> empty .

    PLUS            reduce using rule 90 (termp -> empty .)
    MINUS           reduce using rule 90 (termp -> empty .)
    LT              reduce using rule 90 (termp -> empty .)
    GT              reduce using rule 90 (termp -> empty .)
    LTEQ            reduce using rule 90 (termp -> empty .)
    GTEQ            reduce using rule 90 (termp -> empty .)
    EQ              reduce using rule 90 (termp -> empty .)
    NEQ             reduce using rule 90 (termp -> empty .)
    AND             reduce using rule 90 (termp -> empty .)
    OR              reduce using rule 90 (termp -> empty .)
    RSQUARE         reduce using rule 90 (termp -> empty .)
    RPAREN          reduce using rule 90 (termp -> empty .)
    SEMMICOLON      reduce using rule 90 (termp -> empty .)


state 62

    (69) sexprima -> AND . push_operator sexp
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 94

state 63

    (67) sexp -> cuadruplo_1 sexprima .

    RPAREN          reduce using rule 67 (sexp -> cuadruplo_1 sexprima .)
    SEMMICOLON      reduce using rule 67 (sexp -> cuadruplo_1 sexprima .)
    RSQUARE         reduce using rule 67 (sexp -> cuadruplo_1 sexprima .)


state 64

    (70) sexprima -> OR . push_operator sexp
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 95

state 65

    (71) sexprima -> empty .

    RSQUARE         reduce using rule 71 (sexprima -> empty .)
    RPAREN          reduce using rule 71 (sexprima -> empty .)
    SEMMICOLON      reduce using rule 71 (sexprima -> empty .)


state 66

    (81) exp -> cuadruplo_3 expp .

    LT              reduce using rule 81 (exp -> cuadruplo_3 expp .)
    GT              reduce using rule 81 (exp -> cuadruplo_3 expp .)
    LTEQ            reduce using rule 81 (exp -> cuadruplo_3 expp .)
    GTEQ            reduce using rule 81 (exp -> cuadruplo_3 expp .)
    EQ              reduce using rule 81 (exp -> cuadruplo_3 expp .)
    NEQ             reduce using rule 81 (exp -> cuadruplo_3 expp .)
    AND             reduce using rule 81 (exp -> cuadruplo_3 expp .)
    OR              reduce using rule 81 (exp -> cuadruplo_3 expp .)
    RSQUARE         reduce using rule 81 (exp -> cuadruplo_3 expp .)
    RPAREN          reduce using rule 81 (exp -> cuadruplo_3 expp .)
    SEMMICOLON      reduce using rule 81 (exp -> cuadruplo_3 expp .)


state 67

    (83) expp -> PLUS . push_operator exp
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 96

state 68

    (84) expp -> MINUS . push_operator exp
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 97

state 69

    (85) expp -> empty .

    LT              reduce using rule 85 (expp -> empty .)
    GT              reduce using rule 85 (expp -> empty .)
    LTEQ            reduce using rule 85 (expp -> empty .)
    GTEQ            reduce using rule 85 (expp -> empty .)
    EQ              reduce using rule 85 (expp -> empty .)
    NEQ             reduce using rule 85 (expp -> empty .)
    AND             reduce using rule 85 (expp -> empty .)
    OR              reduce using rule 85 (expp -> empty .)
    RSQUARE         reduce using rule 85 (expp -> empty .)
    RPAREN          reduce using rule 85 (expp -> empty .)
    SEMMICOLON      reduce using rule 85 (expp -> empty .)


state 70

    (75) expressionp -> GT . push_operator expression
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 98

state 71

    (77) expressionp -> GTEQ . push_operator expression
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 99

state 72

    (78) expressionp -> EQ . push_operator expression
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 100

state 73

    (76) expressionp -> LTEQ . push_operator expression
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 101

state 74

    (74) expressionp -> LT . push_operator expression
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 102

state 75

    (72) expression -> cuadruplo_2 expressionp .

    AND             reduce using rule 72 (expression -> cuadruplo_2 expressionp .)
    OR              reduce using rule 72 (expression -> cuadruplo_2 expressionp .)
    RSQUARE         reduce using rule 72 (expression -> cuadruplo_2 expressionp .)
    RPAREN          reduce using rule 72 (expression -> cuadruplo_2 expressionp .)
    SEMMICOLON      reduce using rule 72 (expression -> cuadruplo_2 expressionp .)


state 76

    (80) expressionp -> empty .

    AND             reduce using rule 80 (expressionp -> empty .)
    OR              reduce using rule 80 (expressionp -> empty .)
    RSQUARE         reduce using rule 80 (expressionp -> empty .)
    RPAREN          reduce using rule 80 (expressionp -> empty .)
    SEMMICOLON      reduce using rule 80 (expressionp -> empty .)


state 77

    (79) expressionp -> NEQ . push_operator expression
    (91) push_operator -> .

    LPAREN          reduce using rule 91 (push_operator -> .)
    NUMINT          reduce using rule 91 (push_operator -> .)
    NUMFLOAT        reduce using rule 91 (push_operator -> .)
    ID              reduce using rule 91 (push_operator -> .)
    LT              reduce using rule 91 (push_operator -> .)
    GT              reduce using rule 91 (push_operator -> .)
    LTEQ            reduce using rule 91 (push_operator -> .)
    GTEQ            reduce using rule 91 (push_operator -> .)
    EQ              reduce using rule 91 (push_operator -> .)
    NEQ             reduce using rule 91 (push_operator -> .)
    PLUS            reduce using rule 91 (push_operator -> .)
    MINUS           reduce using rule 91 (push_operator -> .)
    DIVISION        reduce using rule 91 (push_operator -> .)
    TIMES           reduce using rule 91 (push_operator -> .)
    AND             reduce using rule 91 (push_operator -> .)
    OR              reduce using rule 91 (push_operator -> .)
    RSQUARE         reduce using rule 91 (push_operator -> .)
    RPAREN          reduce using rule 91 (push_operator -> .)
    SEMMICOLON      reduce using rule 91 (push_operator -> .)

    push_operator                  shift and go to state 103

state 78

    (15) variable_arrint_list -> ID LSQUARE sexp RSQUARE . SEMMICOLON
    (16) variable_arrint_list -> ID LSQUARE sexp RSQUARE . COMMA variable_arrint_list
    (17) variable_arrint_list -> ID LSQUARE sexp RSQUARE . LSQUARE sexp RSQUARE SEMMICOLON
    (18) variable_arrint_list -> ID LSQUARE sexp RSQUARE . LSQUARE sexp RSQUARE COMMA variable_arrint_list

    SEMMICOLON      shift and go to state 104
    COMMA           shift and go to state 105
    LSQUARE         shift and go to state 106


state 79

    (104) idp -> array_2d .

    DIVISION        reduce using rule 104 (idp -> array_2d .)
    TIMES           reduce using rule 104 (idp -> array_2d .)
    PLUS            reduce using rule 104 (idp -> array_2d .)
    MINUS           reduce using rule 104 (idp -> array_2d .)
    LT              reduce using rule 104 (idp -> array_2d .)
    GT              reduce using rule 104 (idp -> array_2d .)
    LTEQ            reduce using rule 104 (idp -> array_2d .)
    GTEQ            reduce using rule 104 (idp -> array_2d .)
    EQ              reduce using rule 104 (idp -> array_2d .)
    NEQ             reduce using rule 104 (idp -> array_2d .)
    AND             reduce using rule 104 (idp -> array_2d .)
    OR              reduce using rule 104 (idp -> array_2d .)
    RSQUARE         reduce using rule 104 (idp -> array_2d .)
    RPAREN          reduce using rule 104 (idp -> array_2d .)
    SEMMICOLON      reduce using rule 104 (idp -> array_2d .)
    ASSIGN          reduce using rule 104 (idp -> array_2d .)
    LSQUARE         reduce using rule 104 (idp -> array_2d .)
    PLUSPLUS        reduce using rule 104 (idp -> array_2d .)
    MINUSMINUS      reduce using rule 104 (idp -> array_2d .)
    COMMA           reduce using rule 104 (idp -> array_2d .)


state 80

    (105) idp -> LPAREN . RPAREN

    RPAREN          shift and go to state 107


state 81

    (102) id -> ID idp .

    SEMMICOLON      reduce using rule 102 (id -> ID idp .)
    ASSIGN          reduce using rule 102 (id -> ID idp .)
    LSQUARE         reduce using rule 102 (id -> ID idp .)
    PLUSPLUS        reduce using rule 102 (id -> ID idp .)
    MINUSMINUS      reduce using rule 102 (id -> ID idp .)
    DIVISION        reduce using rule 102 (id -> ID idp .)
    TIMES           reduce using rule 102 (id -> ID idp .)
    PLUS            reduce using rule 102 (id -> ID idp .)
    MINUS           reduce using rule 102 (id -> ID idp .)
    LT              reduce using rule 102 (id -> ID idp .)
    GT              reduce using rule 102 (id -> ID idp .)
    LTEQ            reduce using rule 102 (id -> ID idp .)
    GTEQ            reduce using rule 102 (id -> ID idp .)
    EQ              reduce using rule 102 (id -> ID idp .)
    NEQ             reduce using rule 102 (id -> ID idp .)
    AND             reduce using rule 102 (id -> ID idp .)
    OR              reduce using rule 102 (id -> ID idp .)
    RSQUARE         reduce using rule 102 (id -> ID idp .)
    RPAREN          reduce using rule 102 (id -> ID idp .)
    COMMA           reduce using rule 102 (id -> ID idp .)


state 82

    (103) idp -> LSQUARE . sexp RSQUARE
    (107) array_2d -> LSQUARE . sexp RSQUARE LSQUARE sexp RSQUARE
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    sexp                           shift and go to state 108
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 48
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 83

    (106) idp -> empty .

    DIVISION        reduce using rule 106 (idp -> empty .)
    TIMES           reduce using rule 106 (idp -> empty .)
    PLUS            reduce using rule 106 (idp -> empty .)
    MINUS           reduce using rule 106 (idp -> empty .)
    LT              reduce using rule 106 (idp -> empty .)
    GT              reduce using rule 106 (idp -> empty .)
    LTEQ            reduce using rule 106 (idp -> empty .)
    GTEQ            reduce using rule 106 (idp -> empty .)
    EQ              reduce using rule 106 (idp -> empty .)
    NEQ             reduce using rule 106 (idp -> empty .)
    AND             reduce using rule 106 (idp -> empty .)
    OR              reduce using rule 106 (idp -> empty .)
    RSQUARE         reduce using rule 106 (idp -> empty .)
    RPAREN          reduce using rule 106 (idp -> empty .)
    SEMMICOLON      reduce using rule 106 (idp -> empty .)
    ASSIGN          reduce using rule 106 (idp -> empty .)
    LSQUARE         reduce using rule 106 (idp -> empty .)
    PLUSPLUS        reduce using rule 106 (idp -> empty .)
    MINUSMINUS      reduce using rule 106 (idp -> empty .)
    COMMA           reduce using rule 106 (idp -> empty .)


state 84

    (97) cons -> NUMINT int_type .

    DIVISION        reduce using rule 97 (cons -> NUMINT int_type .)
    TIMES           reduce using rule 97 (cons -> NUMINT int_type .)
    PLUS            reduce using rule 97 (cons -> NUMINT int_type .)
    MINUS           reduce using rule 97 (cons -> NUMINT int_type .)
    LT              reduce using rule 97 (cons -> NUMINT int_type .)
    GT              reduce using rule 97 (cons -> NUMINT int_type .)
    LTEQ            reduce using rule 97 (cons -> NUMINT int_type .)
    GTEQ            reduce using rule 97 (cons -> NUMINT int_type .)
    EQ              reduce using rule 97 (cons -> NUMINT int_type .)
    NEQ             reduce using rule 97 (cons -> NUMINT int_type .)
    AND             reduce using rule 97 (cons -> NUMINT int_type .)
    OR              reduce using rule 97 (cons -> NUMINT int_type .)
    SEMMICOLON      reduce using rule 97 (cons -> NUMINT int_type .)
    RSQUARE         reduce using rule 97 (cons -> NUMINT int_type .)
    RPAREN          reduce using rule 97 (cons -> NUMINT int_type .)


state 85

    (13) variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .

    INT             reduce using rule 13 (variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .)
    FLOAT           reduce using rule 13 (variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .)
    ARRINT          reduce using rule 13 (variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .)
    FUNCTION        reduce using rule 13 (variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .)
    MAIN            reduce using rule 13 (variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .)


state 86

    (14) variable_float_list -> ID ASSIGN NUMFLOAT COMMA . variable_float_list
    (11) variable_float_list -> . ID SEMMICOLON
    (12) variable_float_list -> . ID COMMA variable_float_list
    (13) variable_float_list -> . ID ASSIGN NUMFLOAT SEMMICOLON
    (14) variable_float_list -> . ID ASSIGN NUMFLOAT COMMA variable_float_list

    ID              shift and go to state 13

    variable_float_list            shift and go to state 109

state 87

    (21) function_1 -> FUNCTION ID LPAREN RPAREN . function_cuad_1 LKEY estatuto RKEY
    (22) function_cuad_1 -> .

    LKEY            reduce using rule 22 (function_cuad_1 -> .)

    function_cuad_1                shift and go to state 110

state 88

    (23) main_declaration -> MAIN LPAREN . RPAREN LKEY estatuto RKEY

    RPAREN          shift and go to state 111


state 89

    (9) variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .

    INT             reduce using rule 9 (variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .)
    FLOAT           reduce using rule 9 (variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .)
    ARRINT          reduce using rule 9 (variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .)
    FUNCTION        reduce using rule 9 (variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .)
    MAIN            reduce using rule 9 (variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .)


state 90

    (10) variable_ent_list -> ID ASSIGN NUMINT COMMA . variable_ent_list
    (7) variable_ent_list -> . ID SEMMICOLON
    (8) variable_ent_list -> . ID COMMA variable_ent_list
    (9) variable_ent_list -> . ID ASSIGN NUMINT SEMMICOLON
    (10) variable_ent_list -> . ID ASSIGN NUMINT COMMA variable_ent_list

    ID              shift and go to state 19

    variable_ent_list              shift and go to state 112

state 91

    (93) factor -> LPAREN push_operator sexp . RPAREN pop_parentesis

    RPAREN          shift and go to state 113


state 92

    (88) termp -> DIVISION push_operator . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 114
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    factor                         shift and go to state 41
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 93

    (89) termp -> TIMES push_operator . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 115
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    factor                         shift and go to state 41
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 94

    (69) sexprima -> AND push_operator . sexp
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_2                    shift and go to state 40
    sexp                           shift and go to state 116
    cuadruplo_3                    shift and go to state 39
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 48
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 95

    (70) sexprima -> OR push_operator . sexp
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_2                    shift and go to state 40
    sexp                           shift and go to state 117
    cuadruplo_3                    shift and go to state 39
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 48
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 96

    (83) expp -> PLUS push_operator . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_3                    shift and go to state 39
    exp                            shift and go to state 118
    factor                         shift and go to state 41
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 97

    (84) expp -> MINUS push_operator . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_3                    shift and go to state 39
    exp                            shift and go to state 119
    factor                         shift and go to state 41
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 98

    (75) expressionp -> GT push_operator . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 120
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 99

    (77) expressionp -> GTEQ push_operator . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 121
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 100

    (78) expressionp -> EQ push_operator . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 122
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 101

    (76) expressionp -> LTEQ push_operator . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 123
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 102

    (74) expressionp -> LT push_operator . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 124
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 103

    (79) expressionp -> NEQ push_operator . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 125
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 104

    (15) variable_arrint_list -> ID LSQUARE sexp RSQUARE SEMMICOLON .

    INT             reduce using rule 15 (variable_arrint_list -> ID LSQUARE sexp RSQUARE SEMMICOLON .)
    FLOAT           reduce using rule 15 (variable_arrint_list -> ID LSQUARE sexp RSQUARE SEMMICOLON .)
    ARRINT          reduce using rule 15 (variable_arrint_list -> ID LSQUARE sexp RSQUARE SEMMICOLON .)
    FUNCTION        reduce using rule 15 (variable_arrint_list -> ID LSQUARE sexp RSQUARE SEMMICOLON .)
    MAIN            reduce using rule 15 (variable_arrint_list -> ID LSQUARE sexp RSQUARE SEMMICOLON .)


state 105

    (16) variable_arrint_list -> ID LSQUARE sexp RSQUARE COMMA . variable_arrint_list
    (15) variable_arrint_list -> . ID LSQUARE sexp RSQUARE SEMMICOLON
    (16) variable_arrint_list -> . ID LSQUARE sexp RSQUARE COMMA variable_arrint_list
    (17) variable_arrint_list -> . ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON
    (18) variable_arrint_list -> . ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list

    ID              shift and go to state 11

    variable_arrint_list           shift and go to state 126

state 106

    (17) variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE . sexp RSQUARE SEMMICOLON
    (18) variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE . sexp RSQUARE COMMA variable_arrint_list
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    cons                           shift and go to state 33
    id                             shift and go to state 36
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    factor                         shift and go to state 41
    empty                          shift and go to state 42
    sexp                           shift and go to state 127
    term                           shift and go to state 45
    exp                            shift and go to state 47
    expression                     shift and go to state 48

state 107

    (105) idp -> LPAREN RPAREN .

    DIVISION        reduce using rule 105 (idp -> LPAREN RPAREN .)
    TIMES           reduce using rule 105 (idp -> LPAREN RPAREN .)
    PLUS            reduce using rule 105 (idp -> LPAREN RPAREN .)
    MINUS           reduce using rule 105 (idp -> LPAREN RPAREN .)
    LT              reduce using rule 105 (idp -> LPAREN RPAREN .)
    GT              reduce using rule 105 (idp -> LPAREN RPAREN .)
    LTEQ            reduce using rule 105 (idp -> LPAREN RPAREN .)
    GTEQ            reduce using rule 105 (idp -> LPAREN RPAREN .)
    EQ              reduce using rule 105 (idp -> LPAREN RPAREN .)
    NEQ             reduce using rule 105 (idp -> LPAREN RPAREN .)
    AND             reduce using rule 105 (idp -> LPAREN RPAREN .)
    OR              reduce using rule 105 (idp -> LPAREN RPAREN .)
    RSQUARE         reduce using rule 105 (idp -> LPAREN RPAREN .)
    RPAREN          reduce using rule 105 (idp -> LPAREN RPAREN .)
    SEMMICOLON      reduce using rule 105 (idp -> LPAREN RPAREN .)
    ASSIGN          reduce using rule 105 (idp -> LPAREN RPAREN .)
    LSQUARE         reduce using rule 105 (idp -> LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 105 (idp -> LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 105 (idp -> LPAREN RPAREN .)
    COMMA           reduce using rule 105 (idp -> LPAREN RPAREN .)


state 108

    (103) idp -> LSQUARE sexp . RSQUARE
    (107) array_2d -> LSQUARE sexp . RSQUARE LSQUARE sexp RSQUARE

    RSQUARE         shift and go to state 128


state 109

    (14) variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .

    INT             reduce using rule 14 (variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .)
    FLOAT           reduce using rule 14 (variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .)
    ARRINT          reduce using rule 14 (variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .)
    FUNCTION        reduce using rule 14 (variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .)
    MAIN            reduce using rule 14 (variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .)


state 110

    (21) function_1 -> FUNCTION ID LPAREN RPAREN function_cuad_1 . LKEY estatuto RKEY

    LKEY            shift and go to state 129


state 111

    (23) main_declaration -> MAIN LPAREN RPAREN . LKEY estatuto RKEY

    LKEY            shift and go to state 130


state 112

    (10) variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .

    INT             reduce using rule 10 (variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .)
    FLOAT           reduce using rule 10 (variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .)
    ARRINT          reduce using rule 10 (variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .)
    FUNCTION        reduce using rule 10 (variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .)
    MAIN            reduce using rule 10 (variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .)


state 113

    (93) factor -> LPAREN push_operator sexp RPAREN . pop_parentesis
    (95) pop_parentesis -> .

    DIVISION        reduce using rule 95 (pop_parentesis -> .)
    TIMES           reduce using rule 95 (pop_parentesis -> .)
    PLUS            reduce using rule 95 (pop_parentesis -> .)
    MINUS           reduce using rule 95 (pop_parentesis -> .)
    LT              reduce using rule 95 (pop_parentesis -> .)
    GT              reduce using rule 95 (pop_parentesis -> .)
    LTEQ            reduce using rule 95 (pop_parentesis -> .)
    GTEQ            reduce using rule 95 (pop_parentesis -> .)
    EQ              reduce using rule 95 (pop_parentesis -> .)
    NEQ             reduce using rule 95 (pop_parentesis -> .)
    AND             reduce using rule 95 (pop_parentesis -> .)
    OR              reduce using rule 95 (pop_parentesis -> .)
    RSQUARE         reduce using rule 95 (pop_parentesis -> .)
    RPAREN          reduce using rule 95 (pop_parentesis -> .)
    SEMMICOLON      reduce using rule 95 (pop_parentesis -> .)

    pop_parentesis                 shift and go to state 131

state 114

    (88) termp -> DIVISION push_operator term .

    PLUS            reduce using rule 88 (termp -> DIVISION push_operator term .)
    MINUS           reduce using rule 88 (termp -> DIVISION push_operator term .)
    LT              reduce using rule 88 (termp -> DIVISION push_operator term .)
    GT              reduce using rule 88 (termp -> DIVISION push_operator term .)
    LTEQ            reduce using rule 88 (termp -> DIVISION push_operator term .)
    GTEQ            reduce using rule 88 (termp -> DIVISION push_operator term .)
    EQ              reduce using rule 88 (termp -> DIVISION push_operator term .)
    NEQ             reduce using rule 88 (termp -> DIVISION push_operator term .)
    AND             reduce using rule 88 (termp -> DIVISION push_operator term .)
    OR              reduce using rule 88 (termp -> DIVISION push_operator term .)
    RSQUARE         reduce using rule 88 (termp -> DIVISION push_operator term .)
    RPAREN          reduce using rule 88 (termp -> DIVISION push_operator term .)
    SEMMICOLON      reduce using rule 88 (termp -> DIVISION push_operator term .)


state 115

    (89) termp -> TIMES push_operator term .

    PLUS            reduce using rule 89 (termp -> TIMES push_operator term .)
    MINUS           reduce using rule 89 (termp -> TIMES push_operator term .)
    LT              reduce using rule 89 (termp -> TIMES push_operator term .)
    GT              reduce using rule 89 (termp -> TIMES push_operator term .)
    LTEQ            reduce using rule 89 (termp -> TIMES push_operator term .)
    GTEQ            reduce using rule 89 (termp -> TIMES push_operator term .)
    EQ              reduce using rule 89 (termp -> TIMES push_operator term .)
    NEQ             reduce using rule 89 (termp -> TIMES push_operator term .)
    AND             reduce using rule 89 (termp -> TIMES push_operator term .)
    OR              reduce using rule 89 (termp -> TIMES push_operator term .)
    RSQUARE         reduce using rule 89 (termp -> TIMES push_operator term .)
    RPAREN          reduce using rule 89 (termp -> TIMES push_operator term .)
    SEMMICOLON      reduce using rule 89 (termp -> TIMES push_operator term .)


state 116

    (69) sexprima -> AND push_operator sexp .

    RSQUARE         reduce using rule 69 (sexprima -> AND push_operator sexp .)
    RPAREN          reduce using rule 69 (sexprima -> AND push_operator sexp .)
    SEMMICOLON      reduce using rule 69 (sexprima -> AND push_operator sexp .)


state 117

    (70) sexprima -> OR push_operator sexp .

    RSQUARE         reduce using rule 70 (sexprima -> OR push_operator sexp .)
    RPAREN          reduce using rule 70 (sexprima -> OR push_operator sexp .)
    SEMMICOLON      reduce using rule 70 (sexprima -> OR push_operator sexp .)


state 118

    (83) expp -> PLUS push_operator exp .

    LT              reduce using rule 83 (expp -> PLUS push_operator exp .)
    GT              reduce using rule 83 (expp -> PLUS push_operator exp .)
    LTEQ            reduce using rule 83 (expp -> PLUS push_operator exp .)
    GTEQ            reduce using rule 83 (expp -> PLUS push_operator exp .)
    EQ              reduce using rule 83 (expp -> PLUS push_operator exp .)
    NEQ             reduce using rule 83 (expp -> PLUS push_operator exp .)
    AND             reduce using rule 83 (expp -> PLUS push_operator exp .)
    OR              reduce using rule 83 (expp -> PLUS push_operator exp .)
    RSQUARE         reduce using rule 83 (expp -> PLUS push_operator exp .)
    RPAREN          reduce using rule 83 (expp -> PLUS push_operator exp .)
    SEMMICOLON      reduce using rule 83 (expp -> PLUS push_operator exp .)


state 119

    (84) expp -> MINUS push_operator exp .

    LT              reduce using rule 84 (expp -> MINUS push_operator exp .)
    GT              reduce using rule 84 (expp -> MINUS push_operator exp .)
    LTEQ            reduce using rule 84 (expp -> MINUS push_operator exp .)
    GTEQ            reduce using rule 84 (expp -> MINUS push_operator exp .)
    EQ              reduce using rule 84 (expp -> MINUS push_operator exp .)
    NEQ             reduce using rule 84 (expp -> MINUS push_operator exp .)
    AND             reduce using rule 84 (expp -> MINUS push_operator exp .)
    OR              reduce using rule 84 (expp -> MINUS push_operator exp .)
    RSQUARE         reduce using rule 84 (expp -> MINUS push_operator exp .)
    RPAREN          reduce using rule 84 (expp -> MINUS push_operator exp .)
    SEMMICOLON      reduce using rule 84 (expp -> MINUS push_operator exp .)


state 120

    (75) expressionp -> GT push_operator expression .

    AND             reduce using rule 75 (expressionp -> GT push_operator expression .)
    OR              reduce using rule 75 (expressionp -> GT push_operator expression .)
    RSQUARE         reduce using rule 75 (expressionp -> GT push_operator expression .)
    RPAREN          reduce using rule 75 (expressionp -> GT push_operator expression .)
    SEMMICOLON      reduce using rule 75 (expressionp -> GT push_operator expression .)


state 121

    (77) expressionp -> GTEQ push_operator expression .

    AND             reduce using rule 77 (expressionp -> GTEQ push_operator expression .)
    OR              reduce using rule 77 (expressionp -> GTEQ push_operator expression .)
    RSQUARE         reduce using rule 77 (expressionp -> GTEQ push_operator expression .)
    RPAREN          reduce using rule 77 (expressionp -> GTEQ push_operator expression .)
    SEMMICOLON      reduce using rule 77 (expressionp -> GTEQ push_operator expression .)


state 122

    (78) expressionp -> EQ push_operator expression .

    AND             reduce using rule 78 (expressionp -> EQ push_operator expression .)
    OR              reduce using rule 78 (expressionp -> EQ push_operator expression .)
    RSQUARE         reduce using rule 78 (expressionp -> EQ push_operator expression .)
    RPAREN          reduce using rule 78 (expressionp -> EQ push_operator expression .)
    SEMMICOLON      reduce using rule 78 (expressionp -> EQ push_operator expression .)


state 123

    (76) expressionp -> LTEQ push_operator expression .

    AND             reduce using rule 76 (expressionp -> LTEQ push_operator expression .)
    OR              reduce using rule 76 (expressionp -> LTEQ push_operator expression .)
    RSQUARE         reduce using rule 76 (expressionp -> LTEQ push_operator expression .)
    RPAREN          reduce using rule 76 (expressionp -> LTEQ push_operator expression .)
    SEMMICOLON      reduce using rule 76 (expressionp -> LTEQ push_operator expression .)


state 124

    (74) expressionp -> LT push_operator expression .

    AND             reduce using rule 74 (expressionp -> LT push_operator expression .)
    OR              reduce using rule 74 (expressionp -> LT push_operator expression .)
    RSQUARE         reduce using rule 74 (expressionp -> LT push_operator expression .)
    RPAREN          reduce using rule 74 (expressionp -> LT push_operator expression .)
    SEMMICOLON      reduce using rule 74 (expressionp -> LT push_operator expression .)


state 125

    (79) expressionp -> NEQ push_operator expression .

    AND             reduce using rule 79 (expressionp -> NEQ push_operator expression .)
    OR              reduce using rule 79 (expressionp -> NEQ push_operator expression .)
    RSQUARE         reduce using rule 79 (expressionp -> NEQ push_operator expression .)
    RPAREN          reduce using rule 79 (expressionp -> NEQ push_operator expression .)
    SEMMICOLON      reduce using rule 79 (expressionp -> NEQ push_operator expression .)


state 126

    (16) variable_arrint_list -> ID LSQUARE sexp RSQUARE COMMA variable_arrint_list .

    INT             reduce using rule 16 (variable_arrint_list -> ID LSQUARE sexp RSQUARE COMMA variable_arrint_list .)
    FLOAT           reduce using rule 16 (variable_arrint_list -> ID LSQUARE sexp RSQUARE COMMA variable_arrint_list .)
    ARRINT          reduce using rule 16 (variable_arrint_list -> ID LSQUARE sexp RSQUARE COMMA variable_arrint_list .)
    FUNCTION        reduce using rule 16 (variable_arrint_list -> ID LSQUARE sexp RSQUARE COMMA variable_arrint_list .)
    MAIN            reduce using rule 16 (variable_arrint_list -> ID LSQUARE sexp RSQUARE COMMA variable_arrint_list .)


state 127

    (17) variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp . RSQUARE SEMMICOLON
    (18) variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp . RSQUARE COMMA variable_arrint_list

    RSQUARE         shift and go to state 132


state 128

    (103) idp -> LSQUARE sexp RSQUARE .
    (107) array_2d -> LSQUARE sexp RSQUARE . LSQUARE sexp RSQUARE

  ! shift/reduce conflict for LSQUARE resolved as shift
    DIVISION        reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    TIMES           reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    PLUS            reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    MINUS           reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    LT              reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    GT              reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    LTEQ            reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    GTEQ            reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    EQ              reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    NEQ             reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    AND             reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    OR              reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    RSQUARE         reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    RPAREN          reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    SEMMICOLON      reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    ASSIGN          reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    PLUSPLUS        reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    MINUSMINUS      reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    COMMA           reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .)
    LSQUARE         shift and go to state 133

  ! LSQUARE         [ reduce using rule 103 (idp -> LSQUARE sexp RSQUARE .) ]


state 129

    (21) function_1 -> FUNCTION ID LPAREN RPAREN function_cuad_1 LKEY . estatuto RKEY
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    estatuto                       shift and go to state 141
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 130

    (23) main_declaration -> MAIN LPAREN RPAREN LKEY . estatuto RKEY
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 152
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 131

    (93) factor -> LPAREN push_operator sexp RPAREN pop_parentesis .

    DIVISION        reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    TIMES           reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    PLUS            reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    MINUS           reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    LT              reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    GT              reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    LTEQ            reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    GTEQ            reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    EQ              reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    NEQ             reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    AND             reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    OR              reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    SEMMICOLON      reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    RSQUARE         reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    RPAREN          reduce using rule 93 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)


state 132

    (17) variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE . SEMMICOLON
    (18) variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE . COMMA variable_arrint_list

    SEMMICOLON      shift and go to state 153
    COMMA           shift and go to state 154


state 133

    (107) array_2d -> LSQUARE sexp RSQUARE LSQUARE . sexp RSQUARE
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    sexp                           shift and go to state 155
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 48
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 134

    (25) estatuto -> ciclo_for . estatuto
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 156
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 135

    (41) ret_process -> RETURN . SEMMICOLON

    SEMMICOLON      shift and go to state 157


state 136

    (28) estatuto -> read_process . estatuto
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 158
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 137

    (27) estatuto -> ciclo_while . estatuto
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 159
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 138

    (59) ciclo_while -> WHILE . ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (60) ciclo_while_1 -> .

    LPAREN          reduce using rule 60 (ciclo_while_1 -> .)

    ciclo_while_1                  shift and go to state 160

state 139

    (42) print_process -> PRINT . LPAREN print_1 RPAREN SEMMICOLON

    LPAREN          shift and go to state 161


state 140

    (31) estatuto -> id . SEMMICOLON estatuto
    (51) id_asignacion -> id . id_asignacion_prima
    (36) plus_plus -> id . plus_plus_continua
    (39) minus_minus -> id . minus_minus_continua
    (52) id_asignacion_prima -> . ASSIGN sexp SEMMICOLON
    (53) id_asignacion_prima -> . LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON
    (54) id_asignacion_prima -> . LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON
    (37) plus_plus_continua -> . PLUSPLUS SEMMICOLON
    (38) plus_plus_continua -> . PLUSPLUS
    (40) minus_minus_continua -> . MINUSMINUS SEMMICOLON

    SEMMICOLON      shift and go to state 164
    ASSIGN          shift and go to state 166
    LSQUARE         shift and go to state 167
    PLUSPLUS        shift and go to state 163
    MINUSMINUS      shift and go to state 169

    plus_plus_continua             shift and go to state 162
    minus_minus_continua           shift and go to state 165
    id_asignacion_prima            shift and go to state 168

state 141

    (21) function_1 -> FUNCTION ID LPAREN RPAREN function_cuad_1 LKEY estatuto . RKEY

    RKEY            shift and go to state 170


state 142

    (32) estatuto -> ret_process . estatuto
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 171
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 143

    (50) read_process -> READ . LPAREN sexp RPAREN SEMMICOLON

    LPAREN          shift and go to state 172


state 144

    (33) estatuto -> plus_plus . estatuto
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 173
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 145

    (30) estatuto -> id_asignacion . estatuto
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 174
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 146

    (35) estatuto -> empty .

    RKEY            reduce using rule 35 (estatuto -> empty .)
    RPAREN          reduce using rule 35 (estatuto -> empty .)


state 147

    (55) ciclo_for -> FOR . LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3

    LPAREN          shift and go to state 175


state 148

    (26) estatuto -> ciclo_if . estatuto
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 176
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 149

    (29) estatuto -> print_process . estatuto
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 177
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 150

    (62) ciclo_if -> IF . LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else

    LPAREN          shift and go to state 178


state 151

    (34) estatuto -> minus_minus . estatuto
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 179
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 152

    (23) main_declaration -> MAIN LPAREN RPAREN LKEY estatuto . RKEY

    RKEY            shift and go to state 180


state 153

    (17) variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON .

    INT             reduce using rule 17 (variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON .)
    FLOAT           reduce using rule 17 (variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON .)
    ARRINT          reduce using rule 17 (variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON .)
    FUNCTION        reduce using rule 17 (variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON .)
    MAIN            reduce using rule 17 (variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON .)


state 154

    (18) variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA . variable_arrint_list
    (15) variable_arrint_list -> . ID LSQUARE sexp RSQUARE SEMMICOLON
    (16) variable_arrint_list -> . ID LSQUARE sexp RSQUARE COMMA variable_arrint_list
    (17) variable_arrint_list -> . ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE SEMMICOLON
    (18) variable_arrint_list -> . ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list

    ID              shift and go to state 11

    variable_arrint_list           shift and go to state 181

state 155

    (107) array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp . RSQUARE

    RSQUARE         shift and go to state 182


state 156

    (25) estatuto -> ciclo_for estatuto .

    RKEY            reduce using rule 25 (estatuto -> ciclo_for estatuto .)
    RPAREN          reduce using rule 25 (estatuto -> ciclo_for estatuto .)


state 157

    (41) ret_process -> RETURN SEMMICOLON .

    FOR             reduce using rule 41 (ret_process -> RETURN SEMMICOLON .)
    IF              reduce using rule 41 (ret_process -> RETURN SEMMICOLON .)
    WHILE           reduce using rule 41 (ret_process -> RETURN SEMMICOLON .)
    READ            reduce using rule 41 (ret_process -> RETURN SEMMICOLON .)
    PRINT           reduce using rule 41 (ret_process -> RETURN SEMMICOLON .)
    ID              reduce using rule 41 (ret_process -> RETURN SEMMICOLON .)
    RETURN          reduce using rule 41 (ret_process -> RETURN SEMMICOLON .)
    RKEY            reduce using rule 41 (ret_process -> RETURN SEMMICOLON .)
    RPAREN          reduce using rule 41 (ret_process -> RETURN SEMMICOLON .)


state 158

    (28) estatuto -> read_process estatuto .

    RKEY            reduce using rule 28 (estatuto -> read_process estatuto .)
    RPAREN          reduce using rule 28 (estatuto -> read_process estatuto .)


state 159

    (27) estatuto -> ciclo_while estatuto .

    RKEY            reduce using rule 27 (estatuto -> ciclo_while estatuto .)
    RPAREN          reduce using rule 27 (estatuto -> ciclo_while estatuto .)


state 160

    (59) ciclo_while -> WHILE ciclo_while_1 . LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY

    LPAREN          shift and go to state 183


state 161

    (42) print_process -> PRINT LPAREN . print_1 RPAREN SEMMICOLON
    (43) print_1 -> . id print_aux_1 print_prima_1
    (44) print_1 -> . string_type print_aux_2 print_prima_1
    (102) id -> . ID idp
    (101) string_type -> . CTES

    ID              shift and go to state 44
    CTES            shift and go to state 184

    string_type                    shift and go to state 185
    print_1                        shift and go to state 186
    id                             shift and go to state 187

state 162

    (36) plus_plus -> id plus_plus_continua .

    FOR             reduce using rule 36 (plus_plus -> id plus_plus_continua .)
    IF              reduce using rule 36 (plus_plus -> id plus_plus_continua .)
    WHILE           reduce using rule 36 (plus_plus -> id plus_plus_continua .)
    READ            reduce using rule 36 (plus_plus -> id plus_plus_continua .)
    PRINT           reduce using rule 36 (plus_plus -> id plus_plus_continua .)
    ID              reduce using rule 36 (plus_plus -> id plus_plus_continua .)
    RETURN          reduce using rule 36 (plus_plus -> id plus_plus_continua .)
    RKEY            reduce using rule 36 (plus_plus -> id plus_plus_continua .)
    RPAREN          reduce using rule 36 (plus_plus -> id plus_plus_continua .)


state 163

    (37) plus_plus_continua -> PLUSPLUS . SEMMICOLON
    (38) plus_plus_continua -> PLUSPLUS .

    SEMMICOLON      shift and go to state 188
    FOR             reduce using rule 38 (plus_plus_continua -> PLUSPLUS .)
    IF              reduce using rule 38 (plus_plus_continua -> PLUSPLUS .)
    WHILE           reduce using rule 38 (plus_plus_continua -> PLUSPLUS .)
    READ            reduce using rule 38 (plus_plus_continua -> PLUSPLUS .)
    PRINT           reduce using rule 38 (plus_plus_continua -> PLUSPLUS .)
    ID              reduce using rule 38 (plus_plus_continua -> PLUSPLUS .)
    RETURN          reduce using rule 38 (plus_plus_continua -> PLUSPLUS .)
    RKEY            reduce using rule 38 (plus_plus_continua -> PLUSPLUS .)
    RPAREN          reduce using rule 38 (plus_plus_continua -> PLUSPLUS .)


state 164

    (31) estatuto -> id SEMMICOLON . estatuto
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 189
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 165

    (39) minus_minus -> id minus_minus_continua .

    FOR             reduce using rule 39 (minus_minus -> id minus_minus_continua .)
    IF              reduce using rule 39 (minus_minus -> id minus_minus_continua .)
    WHILE           reduce using rule 39 (minus_minus -> id minus_minus_continua .)
    READ            reduce using rule 39 (minus_minus -> id minus_minus_continua .)
    PRINT           reduce using rule 39 (minus_minus -> id minus_minus_continua .)
    ID              reduce using rule 39 (minus_minus -> id minus_minus_continua .)
    RETURN          reduce using rule 39 (minus_minus -> id minus_minus_continua .)
    RKEY            reduce using rule 39 (minus_minus -> id minus_minus_continua .)
    RPAREN          reduce using rule 39 (minus_minus -> id minus_minus_continua .)


state 166

    (52) id_asignacion_prima -> ASSIGN . sexp SEMMICOLON
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    sexp                           shift and go to state 190
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 48
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 167

    (53) id_asignacion_prima -> LSQUARE . sexp RSQUARE ASSIGN sexp SEMMICOLON
    (54) id_asignacion_prima -> LSQUARE . sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    sexp                           shift and go to state 191
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 48
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 168

    (51) id_asignacion -> id id_asignacion_prima .

    FOR             reduce using rule 51 (id_asignacion -> id id_asignacion_prima .)
    IF              reduce using rule 51 (id_asignacion -> id id_asignacion_prima .)
    WHILE           reduce using rule 51 (id_asignacion -> id id_asignacion_prima .)
    READ            reduce using rule 51 (id_asignacion -> id id_asignacion_prima .)
    PRINT           reduce using rule 51 (id_asignacion -> id id_asignacion_prima .)
    ID              reduce using rule 51 (id_asignacion -> id id_asignacion_prima .)
    RETURN          reduce using rule 51 (id_asignacion -> id id_asignacion_prima .)
    RKEY            reduce using rule 51 (id_asignacion -> id id_asignacion_prima .)
    RPAREN          reduce using rule 51 (id_asignacion -> id id_asignacion_prima .)


state 169

    (40) minus_minus_continua -> MINUSMINUS . SEMMICOLON

    SEMMICOLON      shift and go to state 192


state 170

    (21) function_1 -> FUNCTION ID LPAREN RPAREN function_cuad_1 LKEY estatuto RKEY .

    FUNCTION        reduce using rule 21 (function_1 -> FUNCTION ID LPAREN RPAREN function_cuad_1 LKEY estatuto RKEY .)
    MAIN            reduce using rule 21 (function_1 -> FUNCTION ID LPAREN RPAREN function_cuad_1 LKEY estatuto RKEY .)


state 171

    (32) estatuto -> ret_process estatuto .

    RKEY            reduce using rule 32 (estatuto -> ret_process estatuto .)
    RPAREN          reduce using rule 32 (estatuto -> ret_process estatuto .)


state 172

    (50) read_process -> READ LPAREN . sexp RPAREN SEMMICOLON
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    sexp                           shift and go to state 193
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 48
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 173

    (33) estatuto -> plus_plus estatuto .

    RKEY            reduce using rule 33 (estatuto -> plus_plus estatuto .)
    RPAREN          reduce using rule 33 (estatuto -> plus_plus estatuto .)


state 174

    (30) estatuto -> id_asignacion estatuto .

    RKEY            reduce using rule 30 (estatuto -> id_asignacion estatuto .)
    RPAREN          reduce using rule 30 (estatuto -> id_asignacion estatuto .)


state 175

    (55) ciclo_for -> FOR LPAREN . id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (102) id -> . ID idp

    ID              shift and go to state 44

    id                             shift and go to state 194

state 176

    (26) estatuto -> ciclo_if estatuto .

    RKEY            reduce using rule 26 (estatuto -> ciclo_if estatuto .)
    RPAREN          reduce using rule 26 (estatuto -> ciclo_if estatuto .)


state 177

    (29) estatuto -> print_process estatuto .

    RKEY            reduce using rule 29 (estatuto -> print_process estatuto .)
    RPAREN          reduce using rule 29 (estatuto -> print_process estatuto .)


state 178

    (62) ciclo_if -> IF LPAREN . sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    cons                           shift and go to state 33
    id                             shift and go to state 36
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    factor                         shift and go to state 41
    empty                          shift and go to state 42
    sexp                           shift and go to state 195
    term                           shift and go to state 45
    exp                            shift and go to state 47
    expression                     shift and go to state 48

state 179

    (34) estatuto -> minus_minus estatuto .

    RKEY            reduce using rule 34 (estatuto -> minus_minus estatuto .)
    RPAREN          reduce using rule 34 (estatuto -> minus_minus estatuto .)


state 180

    (23) main_declaration -> MAIN LPAREN RPAREN LKEY estatuto RKEY .

    $end            reduce using rule 23 (main_declaration -> MAIN LPAREN RPAREN LKEY estatuto RKEY .)


state 181

    (18) variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list .

    INT             reduce using rule 18 (variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list .)
    FLOAT           reduce using rule 18 (variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list .)
    ARRINT          reduce using rule 18 (variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list .)
    FUNCTION        reduce using rule 18 (variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list .)
    MAIN            reduce using rule 18 (variable_arrint_list -> ID LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE COMMA variable_arrint_list .)


state 182

    (107) array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .

    DIVISION        reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    TIMES           reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    PLUS            reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    MINUS           reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    LT              reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    GT              reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    LTEQ            reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    GTEQ            reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    EQ              reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    NEQ             reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    AND             reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    OR              reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    RSQUARE         reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    RPAREN          reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    SEMMICOLON      reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    ASSIGN          reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    LSQUARE         reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    PLUSPLUS        reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    MINUSMINUS      reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)
    COMMA           reduce using rule 107 (array_2d -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE .)


state 183

    (59) ciclo_while -> WHILE ciclo_while_1 LPAREN . sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    cons                           shift and go to state 33
    id                             shift and go to state 36
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    factor                         shift and go to state 41
    empty                          shift and go to state 42
    sexp                           shift and go to state 196
    term                           shift and go to state 45
    exp                            shift and go to state 47
    expression                     shift and go to state 48

state 184

    (101) string_type -> CTES .

    COMMA           reduce using rule 101 (string_type -> CTES .)
    RPAREN          reduce using rule 101 (string_type -> CTES .)


state 185

    (44) print_1 -> string_type . print_aux_2 print_prima_1
    (46) print_aux_2 -> .

    COMMA           reduce using rule 46 (print_aux_2 -> .)
    RPAREN          reduce using rule 46 (print_aux_2 -> .)

    print_aux_2                    shift and go to state 197

state 186

    (42) print_process -> PRINT LPAREN print_1 . RPAREN SEMMICOLON

    RPAREN          shift and go to state 198


state 187

    (43) print_1 -> id . print_aux_1 print_prima_1
    (45) print_aux_1 -> .

    COMMA           reduce using rule 45 (print_aux_1 -> .)
    RPAREN          reduce using rule 45 (print_aux_1 -> .)

    print_aux_1                    shift and go to state 199

state 188

    (37) plus_plus_continua -> PLUSPLUS SEMMICOLON .

    FOR             reduce using rule 37 (plus_plus_continua -> PLUSPLUS SEMMICOLON .)
    IF              reduce using rule 37 (plus_plus_continua -> PLUSPLUS SEMMICOLON .)
    WHILE           reduce using rule 37 (plus_plus_continua -> PLUSPLUS SEMMICOLON .)
    READ            reduce using rule 37 (plus_plus_continua -> PLUSPLUS SEMMICOLON .)
    PRINT           reduce using rule 37 (plus_plus_continua -> PLUSPLUS SEMMICOLON .)
    ID              reduce using rule 37 (plus_plus_continua -> PLUSPLUS SEMMICOLON .)
    RETURN          reduce using rule 37 (plus_plus_continua -> PLUSPLUS SEMMICOLON .)
    RKEY            reduce using rule 37 (plus_plus_continua -> PLUSPLUS SEMMICOLON .)
    RPAREN          reduce using rule 37 (plus_plus_continua -> PLUSPLUS SEMMICOLON .)


state 189

    (31) estatuto -> id SEMMICOLON estatuto .

    RKEY            reduce using rule 31 (estatuto -> id SEMMICOLON estatuto .)
    RPAREN          reduce using rule 31 (estatuto -> id SEMMICOLON estatuto .)


state 190

    (52) id_asignacion_prima -> ASSIGN sexp . SEMMICOLON

    SEMMICOLON      shift and go to state 200


state 191

    (53) id_asignacion_prima -> LSQUARE sexp . RSQUARE ASSIGN sexp SEMMICOLON
    (54) id_asignacion_prima -> LSQUARE sexp . RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON

    RSQUARE         shift and go to state 201


state 192

    (40) minus_minus_continua -> MINUSMINUS SEMMICOLON .

    FOR             reduce using rule 40 (minus_minus_continua -> MINUSMINUS SEMMICOLON .)
    IF              reduce using rule 40 (minus_minus_continua -> MINUSMINUS SEMMICOLON .)
    WHILE           reduce using rule 40 (minus_minus_continua -> MINUSMINUS SEMMICOLON .)
    READ            reduce using rule 40 (minus_minus_continua -> MINUSMINUS SEMMICOLON .)
    PRINT           reduce using rule 40 (minus_minus_continua -> MINUSMINUS SEMMICOLON .)
    ID              reduce using rule 40 (minus_minus_continua -> MINUSMINUS SEMMICOLON .)
    RETURN          reduce using rule 40 (minus_minus_continua -> MINUSMINUS SEMMICOLON .)
    RKEY            reduce using rule 40 (minus_minus_continua -> MINUSMINUS SEMMICOLON .)
    RPAREN          reduce using rule 40 (minus_minus_continua -> MINUSMINUS SEMMICOLON .)


state 193

    (50) read_process -> READ LPAREN sexp . RPAREN SEMMICOLON

    RPAREN          shift and go to state 202


state 194

    (55) ciclo_for -> FOR LPAREN id . ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3

    ASSIGN          shift and go to state 203


state 195

    (62) ciclo_if -> IF LPAREN sexp . RPAREN ciclo_if_1 LKEY estatuto RKEY if_else

    RPAREN          shift and go to state 204


state 196

    (59) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp . RPAREN ciclo_while_2 LKEY estatuto RKEY

    RPAREN          shift and go to state 205


state 197

    (44) print_1 -> string_type print_aux_2 . print_prima_1
    (47) print_prima_1 -> . COMMA print_prima_2 print_1
    (48) print_prima_1 -> . empty print_prima_2
    (108) empty -> .

    COMMA           shift and go to state 207
    RPAREN          reduce using rule 108 (empty -> .)

    print_prima_1                  shift and go to state 206
    empty                          shift and go to state 208

state 198

    (42) print_process -> PRINT LPAREN print_1 RPAREN . SEMMICOLON

    SEMMICOLON      shift and go to state 209


state 199

    (43) print_1 -> id print_aux_1 . print_prima_1
    (47) print_prima_1 -> . COMMA print_prima_2 print_1
    (48) print_prima_1 -> . empty print_prima_2
    (108) empty -> .

    COMMA           shift and go to state 207
    RPAREN          reduce using rule 108 (empty -> .)

    print_prima_1                  shift and go to state 210
    empty                          shift and go to state 208

state 200

    (52) id_asignacion_prima -> ASSIGN sexp SEMMICOLON .

    FOR             reduce using rule 52 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    IF              reduce using rule 52 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    WHILE           reduce using rule 52 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    READ            reduce using rule 52 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    PRINT           reduce using rule 52 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    ID              reduce using rule 52 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    RETURN          reduce using rule 52 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    RKEY            reduce using rule 52 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    RPAREN          reduce using rule 52 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)


state 201

    (53) id_asignacion_prima -> LSQUARE sexp RSQUARE . ASSIGN sexp SEMMICOLON
    (54) id_asignacion_prima -> LSQUARE sexp RSQUARE . LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON

    ASSIGN          shift and go to state 211
    LSQUARE         shift and go to state 212


state 202

    (50) read_process -> READ LPAREN sexp RPAREN . SEMMICOLON

    SEMMICOLON      shift and go to state 213


state 203

    (55) ciclo_for -> FOR LPAREN id ASSIGN . sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    cons                           shift and go to state 33
    cuadruplo_2                    shift and go to state 40
    id                             shift and go to state 36
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    factor                         shift and go to state 41
    empty                          shift and go to state 42
    sexp                           shift and go to state 214
    term                           shift and go to state 45
    exp                            shift and go to state 47
    expression                     shift and go to state 48

state 204

    (62) ciclo_if -> IF LPAREN sexp RPAREN . ciclo_if_1 LKEY estatuto RKEY if_else
    (63) ciclo_if_1 -> .

    LKEY            reduce using rule 63 (ciclo_if_1 -> .)

    ciclo_if_1                     shift and go to state 215

state 205

    (59) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN . ciclo_while_2 LKEY estatuto RKEY
    (61) ciclo_while_2 -> .

    LKEY            reduce using rule 61 (ciclo_while_2 -> .)

    ciclo_while_2                  shift and go to state 216

state 206

    (44) print_1 -> string_type print_aux_2 print_prima_1 .

    RPAREN          reduce using rule 44 (print_1 -> string_type print_aux_2 print_prima_1 .)


state 207

    (47) print_prima_1 -> COMMA . print_prima_2 print_1
    (49) print_prima_2 -> .

    ID              reduce using rule 49 (print_prima_2 -> .)
    CTES            reduce using rule 49 (print_prima_2 -> .)

    print_prima_2                  shift and go to state 217

state 208

    (48) print_prima_1 -> empty . print_prima_2
    (49) print_prima_2 -> .

    RPAREN          reduce using rule 49 (print_prima_2 -> .)

    print_prima_2                  shift and go to state 218

state 209

    (42) print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .

    FOR             reduce using rule 42 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    IF              reduce using rule 42 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    WHILE           reduce using rule 42 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    READ            reduce using rule 42 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    PRINT           reduce using rule 42 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    ID              reduce using rule 42 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    RETURN          reduce using rule 42 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    RKEY            reduce using rule 42 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    RPAREN          reduce using rule 42 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)


state 210

    (43) print_1 -> id print_aux_1 print_prima_1 .

    RPAREN          reduce using rule 43 (print_1 -> id print_aux_1 print_prima_1 .)


state 211

    (53) id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN . sexp SEMMICOLON
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    sexp                           shift and go to state 219
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 48
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 212

    (54) id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE . sexp RSQUARE ASSIGN sexp SEMMICOLON
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    RSQUARE         reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    sexp                           shift and go to state 220
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 48
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 213

    (50) read_process -> READ LPAREN sexp RPAREN SEMMICOLON .

    FOR             reduce using rule 50 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    IF              reduce using rule 50 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    WHILE           reduce using rule 50 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    READ            reduce using rule 50 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    PRINT           reduce using rule 50 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    ID              reduce using rule 50 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    RETURN          reduce using rule 50 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    RKEY            reduce using rule 50 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    RPAREN          reduce using rule 50 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)


state 214

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp . ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (56) ciclo_for_1 -> .

    SEMMICOLON      reduce using rule 56 (ciclo_for_1 -> .)

    ciclo_for_1                    shift and go to state 221

state 215

    (62) ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 . LKEY estatuto RKEY if_else

    LKEY            shift and go to state 222


state 216

    (59) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 . LKEY estatuto RKEY

    LKEY            shift and go to state 223


state 217

    (47) print_prima_1 -> COMMA print_prima_2 . print_1
    (43) print_1 -> . id print_aux_1 print_prima_1
    (44) print_1 -> . string_type print_aux_2 print_prima_1
    (102) id -> . ID idp
    (101) string_type -> . CTES

    ID              shift and go to state 44
    CTES            shift and go to state 184

    string_type                    shift and go to state 185
    print_1                        shift and go to state 224
    id                             shift and go to state 187

state 218

    (48) print_prima_1 -> empty print_prima_2 .

    RPAREN          reduce using rule 48 (print_prima_1 -> empty print_prima_2 .)


state 219

    (53) id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp . SEMMICOLON

    SEMMICOLON      shift and go to state 225


state 220

    (54) id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp . RSQUARE ASSIGN sexp SEMMICOLON

    RSQUARE         shift and go to state 226


state 221

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 . SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3

    SEMMICOLON      shift and go to state 227


state 222

    (62) ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY . estatuto RKEY if_else
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 228
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 223

    (59) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY . estatuto RKEY
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 229
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 224

    (47) print_prima_1 -> COMMA print_prima_2 print_1 .

    RPAREN          reduce using rule 47 (print_prima_1 -> COMMA print_prima_2 print_1 .)


state 225

    (53) id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .

    FOR             reduce using rule 53 (id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    IF              reduce using rule 53 (id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    WHILE           reduce using rule 53 (id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    READ            reduce using rule 53 (id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    PRINT           reduce using rule 53 (id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    ID              reduce using rule 53 (id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    RETURN          reduce using rule 53 (id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    RKEY            reduce using rule 53 (id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    RPAREN          reduce using rule 53 (id_asignacion_prima -> LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)


state 226

    (54) id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE . ASSIGN sexp SEMMICOLON

    ASSIGN          shift and go to state 230


state 227

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON . sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    cons                           shift and go to state 33
    cuadruplo_2                    shift and go to state 40
    id                             shift and go to state 36
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    factor                         shift and go to state 41
    empty                          shift and go to state 42
    sexp                           shift and go to state 231
    term                           shift and go to state 45
    exp                            shift and go to state 47
    expression                     shift and go to state 48

state 228

    (62) ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto . RKEY if_else

    RKEY            shift and go to state 232


state 229

    (59) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto . RKEY

    RKEY            shift and go to state 233


state 230

    (54) id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN . sexp SEMMICOLON
    (67) sexp -> . cuadruplo_1 sexprima
    (68) cuadruplo_1 -> . expression
    (72) expression -> . cuadruplo_2 expressionp
    (73) cuadruplo_2 -> . exp
    (81) exp -> . cuadruplo_3 expp
    (82) cuadruplo_3 -> . term
    (86) term -> . cuadruplo_4 termp
    (87) cuadruplo_4 -> . factor
    (92) factor -> . cons
    (93) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (94) factor -> . empty
    (96) cons -> . id
    (97) cons -> . NUMINT int_type
    (98) cons -> . NUMFLOAT float_type
    (108) empty -> .
    (102) id -> . ID idp

    LPAREN          shift and go to state 34
    NUMINT          shift and go to state 46
    NUMFLOAT        shift and go to state 35
    DIVISION        reduce using rule 108 (empty -> .)
    TIMES           reduce using rule 108 (empty -> .)
    PLUS            reduce using rule 108 (empty -> .)
    MINUS           reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    LTEQ            reduce using rule 108 (empty -> .)
    GTEQ            reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    NEQ             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    SEMMICOLON      reduce using rule 108 (empty -> .)
    ID              shift and go to state 44

    term                           shift and go to state 45
    cons                           shift and go to state 33
    cuadruplo_4                    shift and go to state 37
    cuadruplo_1                    shift and go to state 38
    cuadruplo_3                    shift and go to state 39
    cuadruplo_2                    shift and go to state 40
    sexp                           shift and go to state 234
    exp                            shift and go to state 47
    factor                         shift and go to state 41
    expression                     shift and go to state 48
    id                             shift and go to state 36
    empty                          shift and go to state 42

state 231

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp . ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (57) ciclo_for_2 -> .

    SEMMICOLON      reduce using rule 57 (ciclo_for_2 -> .)

    ciclo_for_2                    shift and go to state 235

state 232

    (62) ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY . if_else
    (64) if_else -> . ELSE LKEY if_else_1 estatuto RKEY
    (65) if_else -> . empty
    (108) empty -> .

    ELSE            shift and go to state 236
    FOR             reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    READ            reduce using rule 108 (empty -> .)
    PRINT           reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    RKEY            reduce using rule 108 (empty -> .)
    RPAREN          reduce using rule 108 (empty -> .)

    if_else                        shift and go to state 237
    empty                          shift and go to state 238

state 233

    (59) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .

    FOR             reduce using rule 59 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    IF              reduce using rule 59 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    WHILE           reduce using rule 59 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    READ            reduce using rule 59 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    PRINT           reduce using rule 59 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    ID              reduce using rule 59 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    RETURN          reduce using rule 59 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    RKEY            reduce using rule 59 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    RPAREN          reduce using rule 59 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)


state 234

    (54) id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp . SEMMICOLON

    SEMMICOLON      shift and go to state 239


state 235

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 . SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3

    SEMMICOLON      shift and go to state 240


state 236

    (64) if_else -> ELSE . LKEY if_else_1 estatuto RKEY

    LKEY            shift and go to state 241


state 237

    (62) ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .

    FOR             reduce using rule 62 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    IF              reduce using rule 62 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    WHILE           reduce using rule 62 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    READ            reduce using rule 62 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    PRINT           reduce using rule 62 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    ID              reduce using rule 62 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    RETURN          reduce using rule 62 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    RKEY            reduce using rule 62 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    RPAREN          reduce using rule 62 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)


state 238

    (65) if_else -> empty .

    FOR             reduce using rule 65 (if_else -> empty .)
    IF              reduce using rule 65 (if_else -> empty .)
    WHILE           reduce using rule 65 (if_else -> empty .)
    READ            reduce using rule 65 (if_else -> empty .)
    PRINT           reduce using rule 65 (if_else -> empty .)
    ID              reduce using rule 65 (if_else -> empty .)
    RETURN          reduce using rule 65 (if_else -> empty .)
    RKEY            reduce using rule 65 (if_else -> empty .)
    RPAREN          reduce using rule 65 (if_else -> empty .)


state 239

    (54) id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .

    FOR             reduce using rule 54 (id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    IF              reduce using rule 54 (id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    WHILE           reduce using rule 54 (id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    READ            reduce using rule 54 (id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    PRINT           reduce using rule 54 (id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    ID              reduce using rule 54 (id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    RETURN          reduce using rule 54 (id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    RKEY            reduce using rule 54 (id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)
    RPAREN          reduce using rule 54 (id_asignacion_prima -> LSQUARE sexp RSQUARE LSQUARE sexp RSQUARE ASSIGN sexp SEMMICOLON .)


state 240

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON . estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RPAREN          reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 242
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    ret_process                    shift and go to state 142
    minus_minus                    shift and go to state 151

state 241

    (64) if_else -> ELSE LKEY . if_else_1 estatuto RKEY
    (66) if_else_1 -> .

    FOR             reduce using rule 66 (if_else_1 -> .)
    IF              reduce using rule 66 (if_else_1 -> .)
    WHILE           reduce using rule 66 (if_else_1 -> .)
    READ            reduce using rule 66 (if_else_1 -> .)
    PRINT           reduce using rule 66 (if_else_1 -> .)
    ID              reduce using rule 66 (if_else_1 -> .)
    RETURN          reduce using rule 66 (if_else_1 -> .)
    RKEY            reduce using rule 66 (if_else_1 -> .)

    if_else_1                      shift and go to state 243

state 242

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto . RPAREN LKEY estatuto RKEY ciclo_for_3

    RPAREN          shift and go to state 244


state 243

    (64) if_else -> ELSE LKEY if_else_1 . estatuto RKEY
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 245
    ret_process                    shift and go to state 142
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    minus_minus                    shift and go to state 151

state 244

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN . LKEY estatuto RKEY ciclo_for_3

    LKEY            shift and go to state 246


state 245

    (64) if_else -> ELSE LKEY if_else_1 estatuto . RKEY

    RKEY            shift and go to state 247


state 246

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY . estatuto RKEY ciclo_for_3
    (25) estatuto -> . ciclo_for estatuto
    (26) estatuto -> . ciclo_if estatuto
    (27) estatuto -> . ciclo_while estatuto
    (28) estatuto -> . read_process estatuto
    (29) estatuto -> . print_process estatuto
    (30) estatuto -> . id_asignacion estatuto
    (31) estatuto -> . id SEMMICOLON estatuto
    (32) estatuto -> . ret_process estatuto
    (33) estatuto -> . plus_plus estatuto
    (34) estatuto -> . minus_minus estatuto
    (35) estatuto -> . empty
    (55) ciclo_for -> . FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3
    (62) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (59) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (50) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (42) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (51) id_asignacion -> . id id_asignacion_prima
    (102) id -> . ID idp
    (41) ret_process -> . RETURN SEMMICOLON
    (36) plus_plus -> . id plus_plus_continua
    (39) minus_minus -> . id minus_minus_continua
    (108) empty -> .

    FOR             shift and go to state 147
    IF              shift and go to state 150
    WHILE           shift and go to state 138
    READ            shift and go to state 143
    PRINT           shift and go to state 139
    ID              shift and go to state 44
    RETURN          shift and go to state 135
    RKEY            reduce using rule 108 (empty -> .)

    ciclo_for                      shift and go to state 134
    read_process                   shift and go to state 136
    ciclo_while                    shift and go to state 137
    id                             shift and go to state 140
    estatuto                       shift and go to state 248
    plus_plus                      shift and go to state 144
    id_asignacion                  shift and go to state 145
    empty                          shift and go to state 146
    ciclo_if                       shift and go to state 148
    print_process                  shift and go to state 149
    ret_process                    shift and go to state 142
    minus_minus                    shift and go to state 151

state 247

    (64) if_else -> ELSE LKEY if_else_1 estatuto RKEY .

    FOR             reduce using rule 64 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    IF              reduce using rule 64 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    WHILE           reduce using rule 64 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    READ            reduce using rule 64 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    PRINT           reduce using rule 64 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    ID              reduce using rule 64 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    RETURN          reduce using rule 64 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    RKEY            reduce using rule 64 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    RPAREN          reduce using rule 64 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)


state 248

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto . RKEY ciclo_for_3

    RKEY            shift and go to state 249


state 249

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY . ciclo_for_3
    (58) ciclo_for_3 -> .

    FOR             reduce using rule 58 (ciclo_for_3 -> .)
    IF              reduce using rule 58 (ciclo_for_3 -> .)
    WHILE           reduce using rule 58 (ciclo_for_3 -> .)
    READ            reduce using rule 58 (ciclo_for_3 -> .)
    PRINT           reduce using rule 58 (ciclo_for_3 -> .)
    ID              reduce using rule 58 (ciclo_for_3 -> .)
    RETURN          reduce using rule 58 (ciclo_for_3 -> .)
    RKEY            reduce using rule 58 (ciclo_for_3 -> .)
    RPAREN          reduce using rule 58 (ciclo_for_3 -> .)

    ciclo_for_3                    shift and go to state 250

state 250

    (55) ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3 .

    FOR             reduce using rule 55 (ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3 .)
    IF              reduce using rule 55 (ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3 .)
    WHILE           reduce using rule 55 (ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3 .)
    READ            reduce using rule 55 (ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3 .)
    PRINT           reduce using rule 55 (ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3 .)
    ID              reduce using rule 55 (ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3 .)
    RETURN          reduce using rule 55 (ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3 .)
    RKEY            reduce using rule 55 (ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3 .)
    RPAREN          reduce using rule 55 (ciclo_for -> FOR LPAREN id ASSIGN sexp ciclo_for_1 SEMMICOLON sexp ciclo_for_2 SEMMICOLON estatuto RPAREN LKEY estatuto RKEY ciclo_for_3 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQUARE in state 44 resolved as shift
WARNING: shift/reduce conflict for LSQUARE in state 128 resolved as shift

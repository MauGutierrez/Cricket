Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID var_declaration function_declaration main_declaration POINT
Rule 2     var_declaration -> INT variable_ent_list var_declaration
Rule 3     var_declaration -> FLOAT variable_float_list var_declaration
Rule 4     var_declaration -> ARRINT variable_arrint_list var_declaration
Rule 5     var_declaration -> empty
Rule 6     variable_ent_list -> ID SEMMICOLON
Rule 7     variable_ent_list -> ID COMMA variable_ent_list
Rule 8     variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON
Rule 9     variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list
Rule 10    variable_float_list -> ID SEMMICOLON
Rule 11    variable_float_list -> ID COMMA variable_float_list
Rule 12    variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON
Rule 13    variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list
Rule 14    variable_arrint_list -> ID LSQUARE ID RSQUARE SEMMICOLON
Rule 15    variable_arrint_list -> ID LSQUARE ID RSQUARE COMMA variable_arrint_list
Rule 16    variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON
Rule 17    variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list
Rule 18    function_declaration -> function_1
Rule 19    function_declaration -> empty
Rule 20    function_1 -> FUNCTION ID LPAREN RPAREN LKEY estatuto RKEY function_1
Rule 21    function_1 -> FUNCTION ID LPAREN RPAREN LKEY estatuto RKEY
Rule 22    main_declaration -> MAIN LPAREN RPAREN LKEY estatuto RKEY
Rule 23    estatuto -> ciclo_for estatuto
Rule 24    estatuto -> ciclo_if estatuto
Rule 25    estatuto -> ciclo_while estatuto
Rule 26    estatuto -> read_process estatuto
Rule 27    estatuto -> print_process estatuto
Rule 28    estatuto -> call_process estatuto
Rule 29    estatuto -> id_asignacion estatuto
Rule 30    estatuto -> empty
Rule 31    call_process -> CALL ID LPAREN RPAREN SEMMICOLON
Rule 32    print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON
Rule 33    print_1 -> id print_aux_1 print_prima_1
Rule 34    print_1 -> string_type print_aux_2 print_prima_1
Rule 35    print_aux_1 -> <empty>
Rule 36    print_aux_2 -> <empty>
Rule 37    print_prima_1 -> COMMA print_prima_2 print_1
Rule 38    print_prima_1 -> empty print_prima_2
Rule 39    print_prima_2 -> <empty>
Rule 40    read_process -> READ LPAREN sexp RPAREN SEMMICOLON
Rule 41    id_asignacion -> id id_asignacion_prima
Rule 42    id_asignacion_prima -> ASSIGN sexp SEMMICOLON
Rule 43    id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON
Rule 44    id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON
Rule 45    ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
Rule 46    ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
Rule 47    ciclo_while_1 -> <empty>
Rule 48    ciclo_while_2 -> <empty>
Rule 49    ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
Rule 50    ciclo_if_1 -> <empty>
Rule 51    if_else -> ELSE LKEY if_else_1 estatuto RKEY
Rule 52    if_else -> empty
Rule 53    if_else_1 -> <empty>
Rule 54    sexp -> cuadruplo_1 sexprima
Rule 55    cuadruplo_1 -> expression
Rule 56    sexprima -> AND push_operator sexp
Rule 57    sexprima -> OR push_operator sexp
Rule 58    sexprima -> empty
Rule 59    expression -> cuadruplo_2 expressionp
Rule 60    cuadruplo_2 -> exp
Rule 61    expressionp -> LT push_operator expression
Rule 62    expressionp -> GT push_operator expression
Rule 63    expressionp -> LTEQ push_operator expression
Rule 64    expressionp -> GTEQ push_operator expression
Rule 65    expressionp -> EQ push_operator expression
Rule 66    expressionp -> NEQ push_operator expression
Rule 67    expressionp -> empty
Rule 68    exp -> cuadruplo_3 expp
Rule 69    cuadruplo_3 -> term
Rule 70    expp -> PLUS push_operator exp
Rule 71    expp -> MINUS push_operator exp
Rule 72    expp -> empty
Rule 73    term -> cuadruplo_4 termp
Rule 74    cuadruplo_4 -> factor
Rule 75    termp -> DIVISION push_operator term
Rule 76    termp -> TIMES push_operator term
Rule 77    termp -> empty
Rule 78    push_operator -> <empty>
Rule 79    factor -> cons
Rule 80    factor -> LPAREN push_operator sexp RPAREN pop_parentesis
Rule 81    factor -> empty
Rule 82    pop_parentesis -> <empty>
Rule 83    cons -> id
Rule 84    cons -> NUMINT int_type
Rule 85    cons -> NUMFLOAT float_type
Rule 86    int_type -> <empty>
Rule 87    float_type -> <empty>
Rule 88    string_type -> CTES
Rule 89    id -> ID
Rule 90    empty -> <empty>

Terminals, with rules where they appear

AND                  : 56
ARRINT               : 4
ASSIGN               : 8 9 12 13 42 43 44 45 45
CALL                 : 31
COMMA                : 7 9 11 13 15 17 37
CTES                 : 88
DIVISION             : 75
ELSE                 : 51
EQ                   : 65
FLOAT                : 3
FOR                  : 45
FUNCTION             : 20 21
GT                   : 62
GTEQ                 : 64
ID                   : 1 6 7 8 9 10 11 12 13 14 14 15 15 16 16 16 17 17 17 20 21 31 45 45 89
IF                   : 49
INT                  : 2
LKEY                 : 20 21 22 45 46 49 51
LPAREN               : 20 21 22 31 32 40 45 46 49 80
LSQUARE              : 14 15 16 16 17 17 43 44 44
LT                   : 61
LTEQ                 : 63
MAIN                 : 22
MINUS                : 71
NEQ                  : 66
NUMFLOAT             : 12 13 85
NUMINT               : 8 9 84
OR                   : 57
PLUS                 : 70
POINT                : 1
PRINT                : 32
PROGRAM              : 1
READ                 : 40
RKEY                 : 20 21 22 45 46 49 51
RPAREN               : 20 21 22 31 32 40 45 46 49 80
RSQUARE              : 14 15 16 16 17 17 43 44 44
SEMMICOLON           : 6 8 10 12 14 16 31 32 40 42 43 44 45 45
TIMES                : 76
WHILE                : 46
error                : 

Nonterminals, with rules where they appear

call_process         : 28
ciclo_for            : 23
ciclo_if             : 24
ciclo_if_1           : 49
ciclo_while          : 25
ciclo_while_1        : 46
ciclo_while_2        : 46
cons                 : 79
cuadruplo_1          : 54
cuadruplo_2          : 59
cuadruplo_3          : 68
cuadruplo_4          : 73
empty                : 5 19 30 38 52 58 67 72 77 81
estatuto             : 20 21 22 23 24 25 26 27 28 29 45 46 49 51
exp                  : 60 70 71
expp                 : 68
expression           : 43 44 44 55 61 62 63 64 65 66
expressionp          : 59
factor               : 74
float_type           : 85
function_1           : 18 20
function_declaration : 1
id                   : 33 41 83
id_asignacion        : 29
id_asignacion_prima  : 41
if_else              : 49
if_else_1            : 51
int_type             : 84
main_declaration     : 1
pop_parentesis       : 80
print_1              : 32 37
print_aux_1          : 33
print_aux_2          : 34
print_prima_1        : 33 34
print_prima_2        : 37 38
print_process        : 27
programa             : 0
push_operator        : 56 57 61 62 63 64 65 66 70 71 75 76 80
read_process         : 26
sexp                 : 40 42 43 44 45 45 45 46 49 56 57 80
sexprima             : 54
string_type          : 34
term                 : 69 75 76
termp                : 73
var_declaration      : 1 2 3 4
variable_arrint_list : 4 15 17
variable_ent_list    : 2 7 9
variable_float_list  : 3 11 13

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID var_declaration function_declaration main_declaration POINT

    PROGRAM         shift and go to state 1

    programa                       shift and go to state 2

state 1

    (1) programa -> PROGRAM . ID var_declaration function_declaration main_declaration POINT

    ID              shift and go to state 3


state 2

    (0) S' -> programa .



state 3

    (1) programa -> PROGRAM ID . var_declaration function_declaration main_declaration POINT
    (2) var_declaration -> . INT variable_ent_list var_declaration
    (3) var_declaration -> . FLOAT variable_float_list var_declaration
    (4) var_declaration -> . ARRINT variable_arrint_list var_declaration
    (5) var_declaration -> . empty
    (90) empty -> .

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ARRINT          shift and go to state 4
    FUNCTION        reduce using rule 90 (empty -> .)
    MAIN            reduce using rule 90 (empty -> .)

    var_declaration                shift and go to state 7
    empty                          shift and go to state 8

state 4

    (4) var_declaration -> ARRINT . variable_arrint_list var_declaration
    (14) variable_arrint_list -> . ID LSQUARE ID RSQUARE SEMMICOLON
    (15) variable_arrint_list -> . ID LSQUARE ID RSQUARE COMMA variable_arrint_list
    (16) variable_arrint_list -> . ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON
    (17) variable_arrint_list -> . ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list

    ID              shift and go to state 10

    variable_arrint_list           shift and go to state 9

state 5

    (2) var_declaration -> INT . variable_ent_list var_declaration
    (6) variable_ent_list -> . ID SEMMICOLON
    (7) variable_ent_list -> . ID COMMA variable_ent_list
    (8) variable_ent_list -> . ID ASSIGN NUMINT SEMMICOLON
    (9) variable_ent_list -> . ID ASSIGN NUMINT COMMA variable_ent_list

    ID              shift and go to state 12

    variable_ent_list              shift and go to state 11

state 6

    (3) var_declaration -> FLOAT . variable_float_list var_declaration
    (10) variable_float_list -> . ID SEMMICOLON
    (11) variable_float_list -> . ID COMMA variable_float_list
    (12) variable_float_list -> . ID ASSIGN NUMFLOAT SEMMICOLON
    (13) variable_float_list -> . ID ASSIGN NUMFLOAT COMMA variable_float_list

    ID              shift and go to state 14

    variable_float_list            shift and go to state 13

state 7

    (1) programa -> PROGRAM ID var_declaration . function_declaration main_declaration POINT
    (18) function_declaration -> . function_1
    (19) function_declaration -> . empty
    (20) function_1 -> . FUNCTION ID LPAREN RPAREN LKEY estatuto RKEY function_1
    (21) function_1 -> . FUNCTION ID LPAREN RPAREN LKEY estatuto RKEY
    (90) empty -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 90 (empty -> .)

    function_declaration           shift and go to state 16
    function_1                     shift and go to state 17
    empty                          shift and go to state 18

state 8

    (5) var_declaration -> empty .

    FUNCTION        reduce using rule 5 (var_declaration -> empty .)
    MAIN            reduce using rule 5 (var_declaration -> empty .)


state 9

    (4) var_declaration -> ARRINT variable_arrint_list . var_declaration
    (2) var_declaration -> . INT variable_ent_list var_declaration
    (3) var_declaration -> . FLOAT variable_float_list var_declaration
    (4) var_declaration -> . ARRINT variable_arrint_list var_declaration
    (5) var_declaration -> . empty
    (90) empty -> .

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ARRINT          shift and go to state 4
    FUNCTION        reduce using rule 90 (empty -> .)
    MAIN            reduce using rule 90 (empty -> .)

    var_declaration                shift and go to state 19
    empty                          shift and go to state 8

state 10

    (14) variable_arrint_list -> ID . LSQUARE ID RSQUARE SEMMICOLON
    (15) variable_arrint_list -> ID . LSQUARE ID RSQUARE COMMA variable_arrint_list
    (16) variable_arrint_list -> ID . LSQUARE ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON
    (17) variable_arrint_list -> ID . LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list

    LSQUARE         shift and go to state 20


state 11

    (2) var_declaration -> INT variable_ent_list . var_declaration
    (2) var_declaration -> . INT variable_ent_list var_declaration
    (3) var_declaration -> . FLOAT variable_float_list var_declaration
    (4) var_declaration -> . ARRINT variable_arrint_list var_declaration
    (5) var_declaration -> . empty
    (90) empty -> .

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ARRINT          shift and go to state 4
    FUNCTION        reduce using rule 90 (empty -> .)
    MAIN            reduce using rule 90 (empty -> .)

    var_declaration                shift and go to state 21
    empty                          shift and go to state 8

state 12

    (6) variable_ent_list -> ID . SEMMICOLON
    (7) variable_ent_list -> ID . COMMA variable_ent_list
    (8) variable_ent_list -> ID . ASSIGN NUMINT SEMMICOLON
    (9) variable_ent_list -> ID . ASSIGN NUMINT COMMA variable_ent_list

    SEMMICOLON      shift and go to state 23
    COMMA           shift and go to state 24
    ASSIGN          shift and go to state 22


state 13

    (3) var_declaration -> FLOAT variable_float_list . var_declaration
    (2) var_declaration -> . INT variable_ent_list var_declaration
    (3) var_declaration -> . FLOAT variable_float_list var_declaration
    (4) var_declaration -> . ARRINT variable_arrint_list var_declaration
    (5) var_declaration -> . empty
    (90) empty -> .

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    ARRINT          shift and go to state 4
    FUNCTION        reduce using rule 90 (empty -> .)
    MAIN            reduce using rule 90 (empty -> .)

    var_declaration                shift and go to state 25
    empty                          shift and go to state 8

state 14

    (10) variable_float_list -> ID . SEMMICOLON
    (11) variable_float_list -> ID . COMMA variable_float_list
    (12) variable_float_list -> ID . ASSIGN NUMFLOAT SEMMICOLON
    (13) variable_float_list -> ID . ASSIGN NUMFLOAT COMMA variable_float_list

    SEMMICOLON      shift and go to state 26
    COMMA           shift and go to state 27
    ASSIGN          shift and go to state 28


state 15

    (20) function_1 -> FUNCTION . ID LPAREN RPAREN LKEY estatuto RKEY function_1
    (21) function_1 -> FUNCTION . ID LPAREN RPAREN LKEY estatuto RKEY

    ID              shift and go to state 29


state 16

    (1) programa -> PROGRAM ID var_declaration function_declaration . main_declaration POINT
    (22) main_declaration -> . MAIN LPAREN RPAREN LKEY estatuto RKEY

    MAIN            shift and go to state 31

    main_declaration               shift and go to state 30

state 17

    (18) function_declaration -> function_1 .

    MAIN            reduce using rule 18 (function_declaration -> function_1 .)


state 18

    (19) function_declaration -> empty .

    MAIN            reduce using rule 19 (function_declaration -> empty .)


state 19

    (4) var_declaration -> ARRINT variable_arrint_list var_declaration .

    FUNCTION        reduce using rule 4 (var_declaration -> ARRINT variable_arrint_list var_declaration .)
    MAIN            reduce using rule 4 (var_declaration -> ARRINT variable_arrint_list var_declaration .)


state 20

    (14) variable_arrint_list -> ID LSQUARE . ID RSQUARE SEMMICOLON
    (15) variable_arrint_list -> ID LSQUARE . ID RSQUARE COMMA variable_arrint_list
    (16) variable_arrint_list -> ID LSQUARE . ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON
    (17) variable_arrint_list -> ID LSQUARE . ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list

    ID              shift and go to state 32


state 21

    (2) var_declaration -> INT variable_ent_list var_declaration .

    FUNCTION        reduce using rule 2 (var_declaration -> INT variable_ent_list var_declaration .)
    MAIN            reduce using rule 2 (var_declaration -> INT variable_ent_list var_declaration .)


state 22

    (8) variable_ent_list -> ID ASSIGN . NUMINT SEMMICOLON
    (9) variable_ent_list -> ID ASSIGN . NUMINT COMMA variable_ent_list

    NUMINT          shift and go to state 33


state 23

    (6) variable_ent_list -> ID SEMMICOLON .

    INT             reduce using rule 6 (variable_ent_list -> ID SEMMICOLON .)
    FLOAT           reduce using rule 6 (variable_ent_list -> ID SEMMICOLON .)
    ARRINT          reduce using rule 6 (variable_ent_list -> ID SEMMICOLON .)
    FUNCTION        reduce using rule 6 (variable_ent_list -> ID SEMMICOLON .)
    MAIN            reduce using rule 6 (variable_ent_list -> ID SEMMICOLON .)


state 24

    (7) variable_ent_list -> ID COMMA . variable_ent_list
    (6) variable_ent_list -> . ID SEMMICOLON
    (7) variable_ent_list -> . ID COMMA variable_ent_list
    (8) variable_ent_list -> . ID ASSIGN NUMINT SEMMICOLON
    (9) variable_ent_list -> . ID ASSIGN NUMINT COMMA variable_ent_list

    ID              shift and go to state 12

    variable_ent_list              shift and go to state 34

state 25

    (3) var_declaration -> FLOAT variable_float_list var_declaration .

    FUNCTION        reduce using rule 3 (var_declaration -> FLOAT variable_float_list var_declaration .)
    MAIN            reduce using rule 3 (var_declaration -> FLOAT variable_float_list var_declaration .)


state 26

    (10) variable_float_list -> ID SEMMICOLON .

    INT             reduce using rule 10 (variable_float_list -> ID SEMMICOLON .)
    FLOAT           reduce using rule 10 (variable_float_list -> ID SEMMICOLON .)
    ARRINT          reduce using rule 10 (variable_float_list -> ID SEMMICOLON .)
    FUNCTION        reduce using rule 10 (variable_float_list -> ID SEMMICOLON .)
    MAIN            reduce using rule 10 (variable_float_list -> ID SEMMICOLON .)


state 27

    (11) variable_float_list -> ID COMMA . variable_float_list
    (10) variable_float_list -> . ID SEMMICOLON
    (11) variable_float_list -> . ID COMMA variable_float_list
    (12) variable_float_list -> . ID ASSIGN NUMFLOAT SEMMICOLON
    (13) variable_float_list -> . ID ASSIGN NUMFLOAT COMMA variable_float_list

    ID              shift and go to state 14

    variable_float_list            shift and go to state 35

state 28

    (12) variable_float_list -> ID ASSIGN . NUMFLOAT SEMMICOLON
    (13) variable_float_list -> ID ASSIGN . NUMFLOAT COMMA variable_float_list

    NUMFLOAT        shift and go to state 36


state 29

    (20) function_1 -> FUNCTION ID . LPAREN RPAREN LKEY estatuto RKEY function_1
    (21) function_1 -> FUNCTION ID . LPAREN RPAREN LKEY estatuto RKEY

    LPAREN          shift and go to state 37


state 30

    (1) programa -> PROGRAM ID var_declaration function_declaration main_declaration . POINT

    POINT           shift and go to state 38


state 31

    (22) main_declaration -> MAIN . LPAREN RPAREN LKEY estatuto RKEY

    LPAREN          shift and go to state 39


state 32

    (14) variable_arrint_list -> ID LSQUARE ID . RSQUARE SEMMICOLON
    (15) variable_arrint_list -> ID LSQUARE ID . RSQUARE COMMA variable_arrint_list
    (16) variable_arrint_list -> ID LSQUARE ID . RSQUARE LSQUARE ID RSQUARE SEMMICOLON
    (17) variable_arrint_list -> ID LSQUARE ID . RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list

    RSQUARE         shift and go to state 40


state 33

    (8) variable_ent_list -> ID ASSIGN NUMINT . SEMMICOLON
    (9) variable_ent_list -> ID ASSIGN NUMINT . COMMA variable_ent_list

    SEMMICOLON      shift and go to state 41
    COMMA           shift and go to state 42


state 34

    (7) variable_ent_list -> ID COMMA variable_ent_list .

    INT             reduce using rule 7 (variable_ent_list -> ID COMMA variable_ent_list .)
    FLOAT           reduce using rule 7 (variable_ent_list -> ID COMMA variable_ent_list .)
    ARRINT          reduce using rule 7 (variable_ent_list -> ID COMMA variable_ent_list .)
    FUNCTION        reduce using rule 7 (variable_ent_list -> ID COMMA variable_ent_list .)
    MAIN            reduce using rule 7 (variable_ent_list -> ID COMMA variable_ent_list .)


state 35

    (11) variable_float_list -> ID COMMA variable_float_list .

    INT             reduce using rule 11 (variable_float_list -> ID COMMA variable_float_list .)
    FLOAT           reduce using rule 11 (variable_float_list -> ID COMMA variable_float_list .)
    ARRINT          reduce using rule 11 (variable_float_list -> ID COMMA variable_float_list .)
    FUNCTION        reduce using rule 11 (variable_float_list -> ID COMMA variable_float_list .)
    MAIN            reduce using rule 11 (variable_float_list -> ID COMMA variable_float_list .)


state 36

    (12) variable_float_list -> ID ASSIGN NUMFLOAT . SEMMICOLON
    (13) variable_float_list -> ID ASSIGN NUMFLOAT . COMMA variable_float_list

    SEMMICOLON      shift and go to state 43
    COMMA           shift and go to state 44


state 37

    (20) function_1 -> FUNCTION ID LPAREN . RPAREN LKEY estatuto RKEY function_1
    (21) function_1 -> FUNCTION ID LPAREN . RPAREN LKEY estatuto RKEY

    RPAREN          shift and go to state 45


state 38

    (1) programa -> PROGRAM ID var_declaration function_declaration main_declaration POINT .

    $end            reduce using rule 1 (programa -> PROGRAM ID var_declaration function_declaration main_declaration POINT .)


state 39

    (22) main_declaration -> MAIN LPAREN . RPAREN LKEY estatuto RKEY

    RPAREN          shift and go to state 46


state 40

    (14) variable_arrint_list -> ID LSQUARE ID RSQUARE . SEMMICOLON
    (15) variable_arrint_list -> ID LSQUARE ID RSQUARE . COMMA variable_arrint_list
    (16) variable_arrint_list -> ID LSQUARE ID RSQUARE . LSQUARE ID RSQUARE SEMMICOLON
    (17) variable_arrint_list -> ID LSQUARE ID RSQUARE . LSQUARE ID RSQUARE COMMA variable_arrint_list

    SEMMICOLON      shift and go to state 47
    COMMA           shift and go to state 48
    LSQUARE         shift and go to state 49


state 41

    (8) variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .

    INT             reduce using rule 8 (variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .)
    FLOAT           reduce using rule 8 (variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .)
    ARRINT          reduce using rule 8 (variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .)
    FUNCTION        reduce using rule 8 (variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .)
    MAIN            reduce using rule 8 (variable_ent_list -> ID ASSIGN NUMINT SEMMICOLON .)


state 42

    (9) variable_ent_list -> ID ASSIGN NUMINT COMMA . variable_ent_list
    (6) variable_ent_list -> . ID SEMMICOLON
    (7) variable_ent_list -> . ID COMMA variable_ent_list
    (8) variable_ent_list -> . ID ASSIGN NUMINT SEMMICOLON
    (9) variable_ent_list -> . ID ASSIGN NUMINT COMMA variable_ent_list

    ID              shift and go to state 12

    variable_ent_list              shift and go to state 50

state 43

    (12) variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .

    INT             reduce using rule 12 (variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .)
    FLOAT           reduce using rule 12 (variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .)
    ARRINT          reduce using rule 12 (variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .)
    FUNCTION        reduce using rule 12 (variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .)
    MAIN            reduce using rule 12 (variable_float_list -> ID ASSIGN NUMFLOAT SEMMICOLON .)


state 44

    (13) variable_float_list -> ID ASSIGN NUMFLOAT COMMA . variable_float_list
    (10) variable_float_list -> . ID SEMMICOLON
    (11) variable_float_list -> . ID COMMA variable_float_list
    (12) variable_float_list -> . ID ASSIGN NUMFLOAT SEMMICOLON
    (13) variable_float_list -> . ID ASSIGN NUMFLOAT COMMA variable_float_list

    ID              shift and go to state 14

    variable_float_list            shift and go to state 51

state 45

    (20) function_1 -> FUNCTION ID LPAREN RPAREN . LKEY estatuto RKEY function_1
    (21) function_1 -> FUNCTION ID LPAREN RPAREN . LKEY estatuto RKEY

    LKEY            shift and go to state 52


state 46

    (22) main_declaration -> MAIN LPAREN RPAREN . LKEY estatuto RKEY

    LKEY            shift and go to state 53


state 47

    (14) variable_arrint_list -> ID LSQUARE ID RSQUARE SEMMICOLON .

    INT             reduce using rule 14 (variable_arrint_list -> ID LSQUARE ID RSQUARE SEMMICOLON .)
    FLOAT           reduce using rule 14 (variable_arrint_list -> ID LSQUARE ID RSQUARE SEMMICOLON .)
    ARRINT          reduce using rule 14 (variable_arrint_list -> ID LSQUARE ID RSQUARE SEMMICOLON .)
    FUNCTION        reduce using rule 14 (variable_arrint_list -> ID LSQUARE ID RSQUARE SEMMICOLON .)
    MAIN            reduce using rule 14 (variable_arrint_list -> ID LSQUARE ID RSQUARE SEMMICOLON .)


state 48

    (15) variable_arrint_list -> ID LSQUARE ID RSQUARE COMMA . variable_arrint_list
    (14) variable_arrint_list -> . ID LSQUARE ID RSQUARE SEMMICOLON
    (15) variable_arrint_list -> . ID LSQUARE ID RSQUARE COMMA variable_arrint_list
    (16) variable_arrint_list -> . ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON
    (17) variable_arrint_list -> . ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list

    ID              shift and go to state 10

    variable_arrint_list           shift and go to state 54

state 49

    (16) variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE . ID RSQUARE SEMMICOLON
    (17) variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE . ID RSQUARE COMMA variable_arrint_list

    ID              shift and go to state 55


state 50

    (9) variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .

    INT             reduce using rule 9 (variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .)
    FLOAT           reduce using rule 9 (variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .)
    ARRINT          reduce using rule 9 (variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .)
    FUNCTION        reduce using rule 9 (variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .)
    MAIN            reduce using rule 9 (variable_ent_list -> ID ASSIGN NUMINT COMMA variable_ent_list .)


state 51

    (13) variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .

    INT             reduce using rule 13 (variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .)
    FLOAT           reduce using rule 13 (variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .)
    ARRINT          reduce using rule 13 (variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .)
    FUNCTION        reduce using rule 13 (variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .)
    MAIN            reduce using rule 13 (variable_float_list -> ID ASSIGN NUMFLOAT COMMA variable_float_list .)


state 52

    (20) function_1 -> FUNCTION ID LPAREN RPAREN LKEY . estatuto RKEY function_1
    (21) function_1 -> FUNCTION ID LPAREN RPAREN LKEY . estatuto RKEY
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 62
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    print_process                  shift and go to state 69
    id_asignacion                  shift and go to state 65
    call_process                   shift and go to state 72
    empty                          shift and go to state 66

state 53

    (22) main_declaration -> MAIN LPAREN RPAREN LKEY . estatuto RKEY
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 73
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    print_process                  shift and go to state 69
    id_asignacion                  shift and go to state 65
    call_process                   shift and go to state 72
    empty                          shift and go to state 66

state 54

    (15) variable_arrint_list -> ID LSQUARE ID RSQUARE COMMA variable_arrint_list .

    INT             reduce using rule 15 (variable_arrint_list -> ID LSQUARE ID RSQUARE COMMA variable_arrint_list .)
    FLOAT           reduce using rule 15 (variable_arrint_list -> ID LSQUARE ID RSQUARE COMMA variable_arrint_list .)
    ARRINT          reduce using rule 15 (variable_arrint_list -> ID LSQUARE ID RSQUARE COMMA variable_arrint_list .)
    FUNCTION        reduce using rule 15 (variable_arrint_list -> ID LSQUARE ID RSQUARE COMMA variable_arrint_list .)
    MAIN            reduce using rule 15 (variable_arrint_list -> ID LSQUARE ID RSQUARE COMMA variable_arrint_list .)


state 55

    (16) variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID . RSQUARE SEMMICOLON
    (17) variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID . RSQUARE COMMA variable_arrint_list

    RSQUARE         shift and go to state 74


state 56

    (23) estatuto -> ciclo_for . estatuto
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 75
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    print_process                  shift and go to state 69
    id_asignacion                  shift and go to state 65
    call_process                   shift and go to state 72
    empty                          shift and go to state 66

state 57

    (26) estatuto -> read_process . estatuto
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 76
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    print_process                  shift and go to state 69
    id_asignacion                  shift and go to state 65
    call_process                   shift and go to state 72
    empty                          shift and go to state 66

state 58

    (25) estatuto -> ciclo_while . estatuto
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 77
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    print_process                  shift and go to state 69
    id_asignacion                  shift and go to state 65
    call_process                   shift and go to state 72
    empty                          shift and go to state 66

state 59

    (46) ciclo_while -> WHILE . ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (47) ciclo_while_1 -> .

    LPAREN          reduce using rule 47 (ciclo_while_1 -> .)

    ciclo_while_1                  shift and go to state 78

state 60

    (32) print_process -> PRINT . LPAREN print_1 RPAREN SEMMICOLON

    LPAREN          shift and go to state 79


state 61

    (41) id_asignacion -> id . id_asignacion_prima
    (42) id_asignacion_prima -> . ASSIGN sexp SEMMICOLON
    (43) id_asignacion_prima -> . LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON
    (44) id_asignacion_prima -> . LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON

    ASSIGN          shift and go to state 80
    LSQUARE         shift and go to state 81

    id_asignacion_prima            shift and go to state 82

state 62

    (20) function_1 -> FUNCTION ID LPAREN RPAREN LKEY estatuto . RKEY function_1
    (21) function_1 -> FUNCTION ID LPAREN RPAREN LKEY estatuto . RKEY

    RKEY            shift and go to state 83


state 63

    (40) read_process -> READ . LPAREN sexp RPAREN SEMMICOLON

    LPAREN          shift and go to state 84


state 64

    (31) call_process -> CALL . ID LPAREN RPAREN SEMMICOLON

    ID              shift and go to state 85


state 65

    (29) estatuto -> id_asignacion . estatuto
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 86
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    print_process                  shift and go to state 69
    id_asignacion                  shift and go to state 65
    call_process                   shift and go to state 72
    empty                          shift and go to state 66

state 66

    (30) estatuto -> empty .

    RKEY            reduce using rule 30 (estatuto -> empty .)


state 67

    (45) ciclo_for -> FOR . LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY

    LPAREN          shift and go to state 87


state 68

    (24) estatuto -> ciclo_if . estatuto
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 88
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    print_process                  shift and go to state 69
    id_asignacion                  shift and go to state 65
    call_process                   shift and go to state 72
    empty                          shift and go to state 66

state 69

    (27) estatuto -> print_process . estatuto
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 89
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    print_process                  shift and go to state 69
    id_asignacion                  shift and go to state 65
    call_process                   shift and go to state 72
    empty                          shift and go to state 66

state 70

    (89) id -> ID .

    ASSIGN          reduce using rule 89 (id -> ID .)
    LSQUARE         reduce using rule 89 (id -> ID .)
    DIVISION        reduce using rule 89 (id -> ID .)
    TIMES           reduce using rule 89 (id -> ID .)
    PLUS            reduce using rule 89 (id -> ID .)
    MINUS           reduce using rule 89 (id -> ID .)
    LT              reduce using rule 89 (id -> ID .)
    GT              reduce using rule 89 (id -> ID .)
    LTEQ            reduce using rule 89 (id -> ID .)
    GTEQ            reduce using rule 89 (id -> ID .)
    EQ              reduce using rule 89 (id -> ID .)
    NEQ             reduce using rule 89 (id -> ID .)
    AND             reduce using rule 89 (id -> ID .)
    OR              reduce using rule 89 (id -> ID .)
    RPAREN          reduce using rule 89 (id -> ID .)
    SEMMICOLON      reduce using rule 89 (id -> ID .)
    RSQUARE         reduce using rule 89 (id -> ID .)
    COMMA           reduce using rule 89 (id -> ID .)


state 71

    (49) ciclo_if -> IF . LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else

    LPAREN          shift and go to state 90


state 72

    (28) estatuto -> call_process . estatuto
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 91
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    call_process                   shift and go to state 72
    id_asignacion                  shift and go to state 65
    print_process                  shift and go to state 69
    empty                          shift and go to state 66

state 73

    (22) main_declaration -> MAIN LPAREN RPAREN LKEY estatuto . RKEY

    RKEY            shift and go to state 92


state 74

    (16) variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE . SEMMICOLON
    (17) variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE . COMMA variable_arrint_list

    SEMMICOLON      shift and go to state 93
    COMMA           shift and go to state 94


state 75

    (23) estatuto -> ciclo_for estatuto .

    RKEY            reduce using rule 23 (estatuto -> ciclo_for estatuto .)


state 76

    (26) estatuto -> read_process estatuto .

    RKEY            reduce using rule 26 (estatuto -> read_process estatuto .)


state 77

    (25) estatuto -> ciclo_while estatuto .

    RKEY            reduce using rule 25 (estatuto -> ciclo_while estatuto .)


state 78

    (46) ciclo_while -> WHILE ciclo_while_1 . LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY

    LPAREN          shift and go to state 95


state 79

    (32) print_process -> PRINT LPAREN . print_1 RPAREN SEMMICOLON
    (33) print_1 -> . id print_aux_1 print_prima_1
    (34) print_1 -> . string_type print_aux_2 print_prima_1
    (89) id -> . ID
    (88) string_type -> . CTES

    ID              shift and go to state 70
    CTES            shift and go to state 96

    string_type                    shift and go to state 97
    print_1                        shift and go to state 98
    id                             shift and go to state 99

state 80

    (42) id_asignacion_prima -> ASSIGN . sexp SEMMICOLON
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    sexp                           shift and go to state 109
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 114
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 81

    (43) id_asignacion_prima -> LSQUARE . expression RSQUARE ASSIGN sexp SEMMICOLON
    (44) id_asignacion_prima -> LSQUARE . expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 115
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 82

    (41) id_asignacion -> id id_asignacion_prima .

    FOR             reduce using rule 41 (id_asignacion -> id id_asignacion_prima .)
    IF              reduce using rule 41 (id_asignacion -> id id_asignacion_prima .)
    WHILE           reduce using rule 41 (id_asignacion -> id id_asignacion_prima .)
    READ            reduce using rule 41 (id_asignacion -> id id_asignacion_prima .)
    PRINT           reduce using rule 41 (id_asignacion -> id id_asignacion_prima .)
    CALL            reduce using rule 41 (id_asignacion -> id id_asignacion_prima .)
    ID              reduce using rule 41 (id_asignacion -> id id_asignacion_prima .)
    RKEY            reduce using rule 41 (id_asignacion -> id id_asignacion_prima .)


state 83

    (20) function_1 -> FUNCTION ID LPAREN RPAREN LKEY estatuto RKEY . function_1
    (21) function_1 -> FUNCTION ID LPAREN RPAREN LKEY estatuto RKEY .
    (20) function_1 -> . FUNCTION ID LPAREN RPAREN LKEY estatuto RKEY function_1
    (21) function_1 -> . FUNCTION ID LPAREN RPAREN LKEY estatuto RKEY

    MAIN            reduce using rule 21 (function_1 -> FUNCTION ID LPAREN RPAREN LKEY estatuto RKEY .)
    FUNCTION        shift and go to state 15

    function_1                     shift and go to state 116

state 84

    (40) read_process -> READ LPAREN . sexp RPAREN SEMMICOLON
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    sexp                           shift and go to state 117
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 114
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 85

    (31) call_process -> CALL ID . LPAREN RPAREN SEMMICOLON

    LPAREN          shift and go to state 118


state 86

    (29) estatuto -> id_asignacion estatuto .

    RKEY            reduce using rule 29 (estatuto -> id_asignacion estatuto .)


state 87

    (45) ciclo_for -> FOR LPAREN . ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY

    ID              shift and go to state 119


state 88

    (24) estatuto -> ciclo_if estatuto .

    RKEY            reduce using rule 24 (estatuto -> ciclo_if estatuto .)


state 89

    (27) estatuto -> print_process estatuto .

    RKEY            reduce using rule 27 (estatuto -> print_process estatuto .)


state 90

    (49) ciclo_if -> IF LPAREN . sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    cons                           shift and go to state 100
    id                             shift and go to state 102
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    factor                         shift and go to state 107
    empty                          shift and go to state 108
    sexp                           shift and go to state 120
    term                           shift and go to state 111
    exp                            shift and go to state 113
    expression                     shift and go to state 114

state 91

    (28) estatuto -> call_process estatuto .

    RKEY            reduce using rule 28 (estatuto -> call_process estatuto .)


state 92

    (22) main_declaration -> MAIN LPAREN RPAREN LKEY estatuto RKEY .

    POINT           reduce using rule 22 (main_declaration -> MAIN LPAREN RPAREN LKEY estatuto RKEY .)


state 93

    (16) variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON .

    INT             reduce using rule 16 (variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON .)
    FLOAT           reduce using rule 16 (variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON .)
    ARRINT          reduce using rule 16 (variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON .)
    FUNCTION        reduce using rule 16 (variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON .)
    MAIN            reduce using rule 16 (variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON .)


state 94

    (17) variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA . variable_arrint_list
    (14) variable_arrint_list -> . ID LSQUARE ID RSQUARE SEMMICOLON
    (15) variable_arrint_list -> . ID LSQUARE ID RSQUARE COMMA variable_arrint_list
    (16) variable_arrint_list -> . ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE SEMMICOLON
    (17) variable_arrint_list -> . ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list

    ID              shift and go to state 10

    variable_arrint_list           shift and go to state 121

state 95

    (46) ciclo_while -> WHILE ciclo_while_1 LPAREN . sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    cons                           shift and go to state 100
    id                             shift and go to state 102
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    factor                         shift and go to state 107
    empty                          shift and go to state 108
    sexp                           shift and go to state 122
    term                           shift and go to state 111
    exp                            shift and go to state 113
    expression                     shift and go to state 114

state 96

    (88) string_type -> CTES .

    COMMA           reduce using rule 88 (string_type -> CTES .)
    RPAREN          reduce using rule 88 (string_type -> CTES .)


state 97

    (34) print_1 -> string_type . print_aux_2 print_prima_1
    (36) print_aux_2 -> .

    COMMA           reduce using rule 36 (print_aux_2 -> .)
    RPAREN          reduce using rule 36 (print_aux_2 -> .)

    print_aux_2                    shift and go to state 123

state 98

    (32) print_process -> PRINT LPAREN print_1 . RPAREN SEMMICOLON

    RPAREN          shift and go to state 124


state 99

    (33) print_1 -> id . print_aux_1 print_prima_1
    (35) print_aux_1 -> .

    COMMA           reduce using rule 35 (print_aux_1 -> .)
    RPAREN          reduce using rule 35 (print_aux_1 -> .)

    print_aux_1                    shift and go to state 125

state 100

    (79) factor -> cons .

    DIVISION        reduce using rule 79 (factor -> cons .)
    TIMES           reduce using rule 79 (factor -> cons .)
    PLUS            reduce using rule 79 (factor -> cons .)
    MINUS           reduce using rule 79 (factor -> cons .)
    LT              reduce using rule 79 (factor -> cons .)
    GT              reduce using rule 79 (factor -> cons .)
    LTEQ            reduce using rule 79 (factor -> cons .)
    GTEQ            reduce using rule 79 (factor -> cons .)
    EQ              reduce using rule 79 (factor -> cons .)
    NEQ             reduce using rule 79 (factor -> cons .)
    AND             reduce using rule 79 (factor -> cons .)
    OR              reduce using rule 79 (factor -> cons .)
    SEMMICOLON      reduce using rule 79 (factor -> cons .)
    RSQUARE         reduce using rule 79 (factor -> cons .)
    RPAREN          reduce using rule 79 (factor -> cons .)


state 101

    (85) cons -> NUMFLOAT . float_type
    (87) float_type -> .

    DIVISION        reduce using rule 87 (float_type -> .)
    TIMES           reduce using rule 87 (float_type -> .)
    PLUS            reduce using rule 87 (float_type -> .)
    MINUS           reduce using rule 87 (float_type -> .)
    LT              reduce using rule 87 (float_type -> .)
    GT              reduce using rule 87 (float_type -> .)
    LTEQ            reduce using rule 87 (float_type -> .)
    GTEQ            reduce using rule 87 (float_type -> .)
    EQ              reduce using rule 87 (float_type -> .)
    NEQ             reduce using rule 87 (float_type -> .)
    AND             reduce using rule 87 (float_type -> .)
    OR              reduce using rule 87 (float_type -> .)
    SEMMICOLON      reduce using rule 87 (float_type -> .)
    RSQUARE         reduce using rule 87 (float_type -> .)
    RPAREN          reduce using rule 87 (float_type -> .)

    float_type                     shift and go to state 126

state 102

    (83) cons -> id .

    DIVISION        reduce using rule 83 (cons -> id .)
    TIMES           reduce using rule 83 (cons -> id .)
    PLUS            reduce using rule 83 (cons -> id .)
    MINUS           reduce using rule 83 (cons -> id .)
    LT              reduce using rule 83 (cons -> id .)
    GT              reduce using rule 83 (cons -> id .)
    LTEQ            reduce using rule 83 (cons -> id .)
    GTEQ            reduce using rule 83 (cons -> id .)
    EQ              reduce using rule 83 (cons -> id .)
    NEQ             reduce using rule 83 (cons -> id .)
    AND             reduce using rule 83 (cons -> id .)
    OR              reduce using rule 83 (cons -> id .)
    SEMMICOLON      reduce using rule 83 (cons -> id .)
    RSQUARE         reduce using rule 83 (cons -> id .)
    RPAREN          reduce using rule 83 (cons -> id .)


state 103

    (73) term -> cuadruplo_4 . termp
    (75) termp -> . DIVISION push_operator term
    (76) termp -> . TIMES push_operator term
    (77) termp -> . empty
    (90) empty -> .

    DIVISION        shift and go to state 127
    TIMES           shift and go to state 129
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    empty                          shift and go to state 130
    termp                          shift and go to state 128

state 104

    (54) sexp -> cuadruplo_1 . sexprima
    (56) sexprima -> . AND push_operator sexp
    (57) sexprima -> . OR push_operator sexp
    (58) sexprima -> . empty
    (90) empty -> .

    AND             shift and go to state 131
    OR              shift and go to state 133
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    empty                          shift and go to state 134
    sexprima                       shift and go to state 132

state 105

    (68) exp -> cuadruplo_3 . expp
    (70) expp -> . PLUS push_operator exp
    (71) expp -> . MINUS push_operator exp
    (72) expp -> . empty
    (90) empty -> .

    PLUS            shift and go to state 136
    MINUS           shift and go to state 137
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    empty                          shift and go to state 138
    expp                           shift and go to state 135

state 106

    (59) expression -> cuadruplo_2 . expressionp
    (61) expressionp -> . LT push_operator expression
    (62) expressionp -> . GT push_operator expression
    (63) expressionp -> . LTEQ push_operator expression
    (64) expressionp -> . GTEQ push_operator expression
    (65) expressionp -> . EQ push_operator expression
    (66) expressionp -> . NEQ push_operator expression
    (67) expressionp -> . empty
    (90) empty -> .

    LT              shift and go to state 143
    GT              shift and go to state 139
    LTEQ            shift and go to state 142
    GTEQ            shift and go to state 140
    EQ              shift and go to state 141
    NEQ             shift and go to state 146
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    expressionp                    shift and go to state 144
    empty                          shift and go to state 145

state 107

    (74) cuadruplo_4 -> factor .

    DIVISION        reduce using rule 74 (cuadruplo_4 -> factor .)
    TIMES           reduce using rule 74 (cuadruplo_4 -> factor .)
    PLUS            reduce using rule 74 (cuadruplo_4 -> factor .)
    MINUS           reduce using rule 74 (cuadruplo_4 -> factor .)
    LT              reduce using rule 74 (cuadruplo_4 -> factor .)
    GT              reduce using rule 74 (cuadruplo_4 -> factor .)
    LTEQ            reduce using rule 74 (cuadruplo_4 -> factor .)
    GTEQ            reduce using rule 74 (cuadruplo_4 -> factor .)
    EQ              reduce using rule 74 (cuadruplo_4 -> factor .)
    NEQ             reduce using rule 74 (cuadruplo_4 -> factor .)
    RSQUARE         reduce using rule 74 (cuadruplo_4 -> factor .)
    AND             reduce using rule 74 (cuadruplo_4 -> factor .)
    OR              reduce using rule 74 (cuadruplo_4 -> factor .)
    SEMMICOLON      reduce using rule 74 (cuadruplo_4 -> factor .)
    RPAREN          reduce using rule 74 (cuadruplo_4 -> factor .)


state 108

    (81) factor -> empty .

    DIVISION        reduce using rule 81 (factor -> empty .)
    TIMES           reduce using rule 81 (factor -> empty .)
    PLUS            reduce using rule 81 (factor -> empty .)
    MINUS           reduce using rule 81 (factor -> empty .)
    LT              reduce using rule 81 (factor -> empty .)
    GT              reduce using rule 81 (factor -> empty .)
    LTEQ            reduce using rule 81 (factor -> empty .)
    GTEQ            reduce using rule 81 (factor -> empty .)
    EQ              reduce using rule 81 (factor -> empty .)
    NEQ             reduce using rule 81 (factor -> empty .)
    AND             reduce using rule 81 (factor -> empty .)
    OR              reduce using rule 81 (factor -> empty .)
    SEMMICOLON      reduce using rule 81 (factor -> empty .)
    RSQUARE         reduce using rule 81 (factor -> empty .)
    RPAREN          reduce using rule 81 (factor -> empty .)


state 109

    (42) id_asignacion_prima -> ASSIGN sexp . SEMMICOLON

    SEMMICOLON      shift and go to state 147


state 110

    (80) factor -> LPAREN . push_operator sexp RPAREN pop_parentesis
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 148

state 111

    (69) cuadruplo_3 -> term .

    PLUS            reduce using rule 69 (cuadruplo_3 -> term .)
    MINUS           reduce using rule 69 (cuadruplo_3 -> term .)
    LT              reduce using rule 69 (cuadruplo_3 -> term .)
    GT              reduce using rule 69 (cuadruplo_3 -> term .)
    LTEQ            reduce using rule 69 (cuadruplo_3 -> term .)
    GTEQ            reduce using rule 69 (cuadruplo_3 -> term .)
    EQ              reduce using rule 69 (cuadruplo_3 -> term .)
    NEQ             reduce using rule 69 (cuadruplo_3 -> term .)
    AND             reduce using rule 69 (cuadruplo_3 -> term .)
    OR              reduce using rule 69 (cuadruplo_3 -> term .)
    SEMMICOLON      reduce using rule 69 (cuadruplo_3 -> term .)
    RPAREN          reduce using rule 69 (cuadruplo_3 -> term .)
    RSQUARE         reduce using rule 69 (cuadruplo_3 -> term .)


state 112

    (84) cons -> NUMINT . int_type
    (86) int_type -> .

    DIVISION        reduce using rule 86 (int_type -> .)
    TIMES           reduce using rule 86 (int_type -> .)
    PLUS            reduce using rule 86 (int_type -> .)
    MINUS           reduce using rule 86 (int_type -> .)
    LT              reduce using rule 86 (int_type -> .)
    GT              reduce using rule 86 (int_type -> .)
    LTEQ            reduce using rule 86 (int_type -> .)
    GTEQ            reduce using rule 86 (int_type -> .)
    EQ              reduce using rule 86 (int_type -> .)
    NEQ             reduce using rule 86 (int_type -> .)
    AND             reduce using rule 86 (int_type -> .)
    OR              reduce using rule 86 (int_type -> .)
    SEMMICOLON      reduce using rule 86 (int_type -> .)
    RSQUARE         reduce using rule 86 (int_type -> .)
    RPAREN          reduce using rule 86 (int_type -> .)

    int_type                       shift and go to state 149

state 113

    (60) cuadruplo_2 -> exp .

    LT              reduce using rule 60 (cuadruplo_2 -> exp .)
    GT              reduce using rule 60 (cuadruplo_2 -> exp .)
    LTEQ            reduce using rule 60 (cuadruplo_2 -> exp .)
    GTEQ            reduce using rule 60 (cuadruplo_2 -> exp .)
    EQ              reduce using rule 60 (cuadruplo_2 -> exp .)
    NEQ             reduce using rule 60 (cuadruplo_2 -> exp .)
    RSQUARE         reduce using rule 60 (cuadruplo_2 -> exp .)
    AND             reduce using rule 60 (cuadruplo_2 -> exp .)
    OR              reduce using rule 60 (cuadruplo_2 -> exp .)
    SEMMICOLON      reduce using rule 60 (cuadruplo_2 -> exp .)
    RPAREN          reduce using rule 60 (cuadruplo_2 -> exp .)


state 114

    (55) cuadruplo_1 -> expression .

    AND             reduce using rule 55 (cuadruplo_1 -> expression .)
    OR              reduce using rule 55 (cuadruplo_1 -> expression .)
    SEMMICOLON      reduce using rule 55 (cuadruplo_1 -> expression .)
    RPAREN          reduce using rule 55 (cuadruplo_1 -> expression .)


state 115

    (43) id_asignacion_prima -> LSQUARE expression . RSQUARE ASSIGN sexp SEMMICOLON
    (44) id_asignacion_prima -> LSQUARE expression . RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON

    RSQUARE         shift and go to state 150


state 116

    (20) function_1 -> FUNCTION ID LPAREN RPAREN LKEY estatuto RKEY function_1 .

    MAIN            reduce using rule 20 (function_1 -> FUNCTION ID LPAREN RPAREN LKEY estatuto RKEY function_1 .)


state 117

    (40) read_process -> READ LPAREN sexp . RPAREN SEMMICOLON

    RPAREN          shift and go to state 151


state 118

    (31) call_process -> CALL ID LPAREN . RPAREN SEMMICOLON

    RPAREN          shift and go to state 152


state 119

    (45) ciclo_for -> FOR LPAREN ID . ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY

    ASSIGN          shift and go to state 153


state 120

    (49) ciclo_if -> IF LPAREN sexp . RPAREN ciclo_if_1 LKEY estatuto RKEY if_else

    RPAREN          shift and go to state 154


state 121

    (17) variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list .

    INT             reduce using rule 17 (variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list .)
    FLOAT           reduce using rule 17 (variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list .)
    ARRINT          reduce using rule 17 (variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list .)
    FUNCTION        reduce using rule 17 (variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list .)
    MAIN            reduce using rule 17 (variable_arrint_list -> ID LSQUARE ID RSQUARE LSQUARE ID RSQUARE COMMA variable_arrint_list .)


state 122

    (46) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp . RPAREN ciclo_while_2 LKEY estatuto RKEY

    RPAREN          shift and go to state 155


state 123

    (34) print_1 -> string_type print_aux_2 . print_prima_1
    (37) print_prima_1 -> . COMMA print_prima_2 print_1
    (38) print_prima_1 -> . empty print_prima_2
    (90) empty -> .

    COMMA           shift and go to state 157
    RPAREN          reduce using rule 90 (empty -> .)

    print_prima_1                  shift and go to state 156
    empty                          shift and go to state 158

state 124

    (32) print_process -> PRINT LPAREN print_1 RPAREN . SEMMICOLON

    SEMMICOLON      shift and go to state 159


state 125

    (33) print_1 -> id print_aux_1 . print_prima_1
    (37) print_prima_1 -> . COMMA print_prima_2 print_1
    (38) print_prima_1 -> . empty print_prima_2
    (90) empty -> .

    COMMA           shift and go to state 157
    RPAREN          reduce using rule 90 (empty -> .)

    print_prima_1                  shift and go to state 160
    empty                          shift and go to state 158

state 126

    (85) cons -> NUMFLOAT float_type .

    DIVISION        reduce using rule 85 (cons -> NUMFLOAT float_type .)
    TIMES           reduce using rule 85 (cons -> NUMFLOAT float_type .)
    PLUS            reduce using rule 85 (cons -> NUMFLOAT float_type .)
    MINUS           reduce using rule 85 (cons -> NUMFLOAT float_type .)
    LT              reduce using rule 85 (cons -> NUMFLOAT float_type .)
    GT              reduce using rule 85 (cons -> NUMFLOAT float_type .)
    LTEQ            reduce using rule 85 (cons -> NUMFLOAT float_type .)
    GTEQ            reduce using rule 85 (cons -> NUMFLOAT float_type .)
    EQ              reduce using rule 85 (cons -> NUMFLOAT float_type .)
    NEQ             reduce using rule 85 (cons -> NUMFLOAT float_type .)
    AND             reduce using rule 85 (cons -> NUMFLOAT float_type .)
    OR              reduce using rule 85 (cons -> NUMFLOAT float_type .)
    SEMMICOLON      reduce using rule 85 (cons -> NUMFLOAT float_type .)
    RSQUARE         reduce using rule 85 (cons -> NUMFLOAT float_type .)
    RPAREN          reduce using rule 85 (cons -> NUMFLOAT float_type .)


state 127

    (75) termp -> DIVISION . push_operator term
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RSQUARE         reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 161

state 128

    (73) term -> cuadruplo_4 termp .

    PLUS            reduce using rule 73 (term -> cuadruplo_4 termp .)
    MINUS           reduce using rule 73 (term -> cuadruplo_4 termp .)
    LT              reduce using rule 73 (term -> cuadruplo_4 termp .)
    GT              reduce using rule 73 (term -> cuadruplo_4 termp .)
    LTEQ            reduce using rule 73 (term -> cuadruplo_4 termp .)
    GTEQ            reduce using rule 73 (term -> cuadruplo_4 termp .)
    EQ              reduce using rule 73 (term -> cuadruplo_4 termp .)
    NEQ             reduce using rule 73 (term -> cuadruplo_4 termp .)
    AND             reduce using rule 73 (term -> cuadruplo_4 termp .)
    OR              reduce using rule 73 (term -> cuadruplo_4 termp .)
    SEMMICOLON      reduce using rule 73 (term -> cuadruplo_4 termp .)
    RSQUARE         reduce using rule 73 (term -> cuadruplo_4 termp .)
    RPAREN          reduce using rule 73 (term -> cuadruplo_4 termp .)


state 129

    (76) termp -> TIMES . push_operator term
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RSQUARE         reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 162

state 130

    (77) termp -> empty .

    PLUS            reduce using rule 77 (termp -> empty .)
    MINUS           reduce using rule 77 (termp -> empty .)
    LT              reduce using rule 77 (termp -> empty .)
    GT              reduce using rule 77 (termp -> empty .)
    LTEQ            reduce using rule 77 (termp -> empty .)
    GTEQ            reduce using rule 77 (termp -> empty .)
    EQ              reduce using rule 77 (termp -> empty .)
    NEQ             reduce using rule 77 (termp -> empty .)
    AND             reduce using rule 77 (termp -> empty .)
    OR              reduce using rule 77 (termp -> empty .)
    SEMMICOLON      reduce using rule 77 (termp -> empty .)
    RSQUARE         reduce using rule 77 (termp -> empty .)
    RPAREN          reduce using rule 77 (termp -> empty .)


state 131

    (56) sexprima -> AND . push_operator sexp
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 163

state 132

    (54) sexp -> cuadruplo_1 sexprima .

    SEMMICOLON      reduce using rule 54 (sexp -> cuadruplo_1 sexprima .)
    RPAREN          reduce using rule 54 (sexp -> cuadruplo_1 sexprima .)


state 133

    (57) sexprima -> OR . push_operator sexp
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 164

state 134

    (58) sexprima -> empty .

    SEMMICOLON      reduce using rule 58 (sexprima -> empty .)
    RPAREN          reduce using rule 58 (sexprima -> empty .)


state 135

    (68) exp -> cuadruplo_3 expp .

    LT              reduce using rule 68 (exp -> cuadruplo_3 expp .)
    GT              reduce using rule 68 (exp -> cuadruplo_3 expp .)
    LTEQ            reduce using rule 68 (exp -> cuadruplo_3 expp .)
    GTEQ            reduce using rule 68 (exp -> cuadruplo_3 expp .)
    EQ              reduce using rule 68 (exp -> cuadruplo_3 expp .)
    NEQ             reduce using rule 68 (exp -> cuadruplo_3 expp .)
    AND             reduce using rule 68 (exp -> cuadruplo_3 expp .)
    OR              reduce using rule 68 (exp -> cuadruplo_3 expp .)
    SEMMICOLON      reduce using rule 68 (exp -> cuadruplo_3 expp .)
    RSQUARE         reduce using rule 68 (exp -> cuadruplo_3 expp .)
    RPAREN          reduce using rule 68 (exp -> cuadruplo_3 expp .)


state 136

    (70) expp -> PLUS . push_operator exp
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RSQUARE         reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 165

state 137

    (71) expp -> MINUS . push_operator exp
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RSQUARE         reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 166

state 138

    (72) expp -> empty .

    LT              reduce using rule 72 (expp -> empty .)
    GT              reduce using rule 72 (expp -> empty .)
    LTEQ            reduce using rule 72 (expp -> empty .)
    GTEQ            reduce using rule 72 (expp -> empty .)
    EQ              reduce using rule 72 (expp -> empty .)
    NEQ             reduce using rule 72 (expp -> empty .)
    AND             reduce using rule 72 (expp -> empty .)
    OR              reduce using rule 72 (expp -> empty .)
    SEMMICOLON      reduce using rule 72 (expp -> empty .)
    RSQUARE         reduce using rule 72 (expp -> empty .)
    RPAREN          reduce using rule 72 (expp -> empty .)


state 139

    (62) expressionp -> GT . push_operator expression
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RSQUARE         reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 167

state 140

    (64) expressionp -> GTEQ . push_operator expression
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RSQUARE         reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 168

state 141

    (65) expressionp -> EQ . push_operator expression
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RSQUARE         reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 169

state 142

    (63) expressionp -> LTEQ . push_operator expression
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RSQUARE         reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 170

state 143

    (61) expressionp -> LT . push_operator expression
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RSQUARE         reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 171

state 144

    (59) expression -> cuadruplo_2 expressionp .

    RSQUARE         reduce using rule 59 (expression -> cuadruplo_2 expressionp .)
    AND             reduce using rule 59 (expression -> cuadruplo_2 expressionp .)
    OR              reduce using rule 59 (expression -> cuadruplo_2 expressionp .)
    SEMMICOLON      reduce using rule 59 (expression -> cuadruplo_2 expressionp .)
    RPAREN          reduce using rule 59 (expression -> cuadruplo_2 expressionp .)


state 145

    (67) expressionp -> empty .

    AND             reduce using rule 67 (expressionp -> empty .)
    OR              reduce using rule 67 (expressionp -> empty .)
    SEMMICOLON      reduce using rule 67 (expressionp -> empty .)
    RSQUARE         reduce using rule 67 (expressionp -> empty .)
    RPAREN          reduce using rule 67 (expressionp -> empty .)


state 146

    (66) expressionp -> NEQ . push_operator expression
    (78) push_operator -> .

    LPAREN          reduce using rule 78 (push_operator -> .)
    NUMINT          reduce using rule 78 (push_operator -> .)
    NUMFLOAT        reduce using rule 78 (push_operator -> .)
    ID              reduce using rule 78 (push_operator -> .)
    LT              reduce using rule 78 (push_operator -> .)
    GT              reduce using rule 78 (push_operator -> .)
    LTEQ            reduce using rule 78 (push_operator -> .)
    GTEQ            reduce using rule 78 (push_operator -> .)
    EQ              reduce using rule 78 (push_operator -> .)
    NEQ             reduce using rule 78 (push_operator -> .)
    PLUS            reduce using rule 78 (push_operator -> .)
    MINUS           reduce using rule 78 (push_operator -> .)
    DIVISION        reduce using rule 78 (push_operator -> .)
    TIMES           reduce using rule 78 (push_operator -> .)
    AND             reduce using rule 78 (push_operator -> .)
    OR              reduce using rule 78 (push_operator -> .)
    SEMMICOLON      reduce using rule 78 (push_operator -> .)
    RSQUARE         reduce using rule 78 (push_operator -> .)
    RPAREN          reduce using rule 78 (push_operator -> .)

    push_operator                  shift and go to state 172

state 147

    (42) id_asignacion_prima -> ASSIGN sexp SEMMICOLON .

    FOR             reduce using rule 42 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    IF              reduce using rule 42 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    WHILE           reduce using rule 42 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    READ            reduce using rule 42 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    PRINT           reduce using rule 42 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    CALL            reduce using rule 42 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    ID              reduce using rule 42 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)
    RKEY            reduce using rule 42 (id_asignacion_prima -> ASSIGN sexp SEMMICOLON .)


state 148

    (80) factor -> LPAREN push_operator . sexp RPAREN pop_parentesis
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_2                    shift and go to state 106
    sexp                           shift and go to state 173
    cuadruplo_3                    shift and go to state 105
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 114
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 149

    (84) cons -> NUMINT int_type .

    DIVISION        reduce using rule 84 (cons -> NUMINT int_type .)
    TIMES           reduce using rule 84 (cons -> NUMINT int_type .)
    PLUS            reduce using rule 84 (cons -> NUMINT int_type .)
    MINUS           reduce using rule 84 (cons -> NUMINT int_type .)
    LT              reduce using rule 84 (cons -> NUMINT int_type .)
    GT              reduce using rule 84 (cons -> NUMINT int_type .)
    LTEQ            reduce using rule 84 (cons -> NUMINT int_type .)
    GTEQ            reduce using rule 84 (cons -> NUMINT int_type .)
    EQ              reduce using rule 84 (cons -> NUMINT int_type .)
    NEQ             reduce using rule 84 (cons -> NUMINT int_type .)
    AND             reduce using rule 84 (cons -> NUMINT int_type .)
    OR              reduce using rule 84 (cons -> NUMINT int_type .)
    SEMMICOLON      reduce using rule 84 (cons -> NUMINT int_type .)
    RSQUARE         reduce using rule 84 (cons -> NUMINT int_type .)
    RPAREN          reduce using rule 84 (cons -> NUMINT int_type .)


state 150

    (43) id_asignacion_prima -> LSQUARE expression RSQUARE . ASSIGN sexp SEMMICOLON
    (44) id_asignacion_prima -> LSQUARE expression RSQUARE . LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON

    ASSIGN          shift and go to state 175
    LSQUARE         shift and go to state 174


state 151

    (40) read_process -> READ LPAREN sexp RPAREN . SEMMICOLON

    SEMMICOLON      shift and go to state 176


state 152

    (31) call_process -> CALL ID LPAREN RPAREN . SEMMICOLON

    SEMMICOLON      shift and go to state 177


state 153

    (45) ciclo_for -> FOR LPAREN ID ASSIGN . sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    sexp                           shift and go to state 178
    cons                           shift and go to state 100
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 114
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 154

    (49) ciclo_if -> IF LPAREN sexp RPAREN . ciclo_if_1 LKEY estatuto RKEY if_else
    (50) ciclo_if_1 -> .

    LKEY            reduce using rule 50 (ciclo_if_1 -> .)

    ciclo_if_1                     shift and go to state 179

state 155

    (46) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN . ciclo_while_2 LKEY estatuto RKEY
    (48) ciclo_while_2 -> .

    LKEY            reduce using rule 48 (ciclo_while_2 -> .)

    ciclo_while_2                  shift and go to state 180

state 156

    (34) print_1 -> string_type print_aux_2 print_prima_1 .

    RPAREN          reduce using rule 34 (print_1 -> string_type print_aux_2 print_prima_1 .)


state 157

    (37) print_prima_1 -> COMMA . print_prima_2 print_1
    (39) print_prima_2 -> .

    ID              reduce using rule 39 (print_prima_2 -> .)
    CTES            reduce using rule 39 (print_prima_2 -> .)

    print_prima_2                  shift and go to state 181

state 158

    (38) print_prima_1 -> empty . print_prima_2
    (39) print_prima_2 -> .

    RPAREN          reduce using rule 39 (print_prima_2 -> .)

    print_prima_2                  shift and go to state 182

state 159

    (32) print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .

    FOR             reduce using rule 32 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    IF              reduce using rule 32 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    WHILE           reduce using rule 32 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    READ            reduce using rule 32 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    PRINT           reduce using rule 32 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    CALL            reduce using rule 32 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    ID              reduce using rule 32 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)
    RKEY            reduce using rule 32 (print_process -> PRINT LPAREN print_1 RPAREN SEMMICOLON .)


state 160

    (33) print_1 -> id print_aux_1 print_prima_1 .

    RPAREN          reduce using rule 33 (print_1 -> id print_aux_1 print_prima_1 .)


state 161

    (75) termp -> DIVISION push_operator . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 183
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    factor                         shift and go to state 107
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 162

    (76) termp -> TIMES push_operator . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 184
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    factor                         shift and go to state 107
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 163

    (56) sexprima -> AND push_operator . sexp
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_2                    shift and go to state 106
    sexp                           shift and go to state 185
    cuadruplo_3                    shift and go to state 105
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 114
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 164

    (57) sexprima -> OR push_operator . sexp
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_2                    shift and go to state 106
    sexp                           shift and go to state 186
    cuadruplo_3                    shift and go to state 105
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 114
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 165

    (70) expp -> PLUS push_operator . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_3                    shift and go to state 105
    exp                            shift and go to state 187
    factor                         shift and go to state 107
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 166

    (71) expp -> MINUS push_operator . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_3                    shift and go to state 105
    exp                            shift and go to state 188
    factor                         shift and go to state 107
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 167

    (62) expressionp -> GT push_operator . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 189
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 168

    (64) expressionp -> GTEQ push_operator . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 190
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 169

    (65) expressionp -> EQ push_operator . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 191
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 170

    (63) expressionp -> LTEQ push_operator . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 192
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 171

    (61) expressionp -> LT push_operator . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 193
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 172

    (66) expressionp -> NEQ push_operator . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 194
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 173

    (80) factor -> LPAREN push_operator sexp . RPAREN pop_parentesis

    RPAREN          shift and go to state 195


state 174

    (44) id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE . expression RSQUARE ASSIGN sexp SEMMICOLON
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    RSQUARE         reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 196
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 175

    (43) id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN . sexp SEMMICOLON
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    sexp                           shift and go to state 197
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 114
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 176

    (40) read_process -> READ LPAREN sexp RPAREN SEMMICOLON .

    FOR             reduce using rule 40 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    IF              reduce using rule 40 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    WHILE           reduce using rule 40 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    READ            reduce using rule 40 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    PRINT           reduce using rule 40 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    CALL            reduce using rule 40 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    ID              reduce using rule 40 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)
    RKEY            reduce using rule 40 (read_process -> READ LPAREN sexp RPAREN SEMMICOLON .)


state 177

    (31) call_process -> CALL ID LPAREN RPAREN SEMMICOLON .

    FOR             reduce using rule 31 (call_process -> CALL ID LPAREN RPAREN SEMMICOLON .)
    IF              reduce using rule 31 (call_process -> CALL ID LPAREN RPAREN SEMMICOLON .)
    WHILE           reduce using rule 31 (call_process -> CALL ID LPAREN RPAREN SEMMICOLON .)
    READ            reduce using rule 31 (call_process -> CALL ID LPAREN RPAREN SEMMICOLON .)
    PRINT           reduce using rule 31 (call_process -> CALL ID LPAREN RPAREN SEMMICOLON .)
    CALL            reduce using rule 31 (call_process -> CALL ID LPAREN RPAREN SEMMICOLON .)
    ID              reduce using rule 31 (call_process -> CALL ID LPAREN RPAREN SEMMICOLON .)
    RKEY            reduce using rule 31 (call_process -> CALL ID LPAREN RPAREN SEMMICOLON .)


state 178

    (45) ciclo_for -> FOR LPAREN ID ASSIGN sexp . SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY

    SEMMICOLON      shift and go to state 198


state 179

    (49) ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 . LKEY estatuto RKEY if_else

    LKEY            shift and go to state 199


state 180

    (46) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 . LKEY estatuto RKEY

    LKEY            shift and go to state 200


state 181

    (37) print_prima_1 -> COMMA print_prima_2 . print_1
    (33) print_1 -> . id print_aux_1 print_prima_1
    (34) print_1 -> . string_type print_aux_2 print_prima_1
    (89) id -> . ID
    (88) string_type -> . CTES

    ID              shift and go to state 70
    CTES            shift and go to state 96

    string_type                    shift and go to state 97
    print_1                        shift and go to state 201
    id                             shift and go to state 99

state 182

    (38) print_prima_1 -> empty print_prima_2 .

    RPAREN          reduce using rule 38 (print_prima_1 -> empty print_prima_2 .)


state 183

    (75) termp -> DIVISION push_operator term .

    PLUS            reduce using rule 75 (termp -> DIVISION push_operator term .)
    MINUS           reduce using rule 75 (termp -> DIVISION push_operator term .)
    LT              reduce using rule 75 (termp -> DIVISION push_operator term .)
    GT              reduce using rule 75 (termp -> DIVISION push_operator term .)
    LTEQ            reduce using rule 75 (termp -> DIVISION push_operator term .)
    GTEQ            reduce using rule 75 (termp -> DIVISION push_operator term .)
    EQ              reduce using rule 75 (termp -> DIVISION push_operator term .)
    NEQ             reduce using rule 75 (termp -> DIVISION push_operator term .)
    AND             reduce using rule 75 (termp -> DIVISION push_operator term .)
    OR              reduce using rule 75 (termp -> DIVISION push_operator term .)
    SEMMICOLON      reduce using rule 75 (termp -> DIVISION push_operator term .)
    RSQUARE         reduce using rule 75 (termp -> DIVISION push_operator term .)
    RPAREN          reduce using rule 75 (termp -> DIVISION push_operator term .)


state 184

    (76) termp -> TIMES push_operator term .

    PLUS            reduce using rule 76 (termp -> TIMES push_operator term .)
    MINUS           reduce using rule 76 (termp -> TIMES push_operator term .)
    LT              reduce using rule 76 (termp -> TIMES push_operator term .)
    GT              reduce using rule 76 (termp -> TIMES push_operator term .)
    LTEQ            reduce using rule 76 (termp -> TIMES push_operator term .)
    GTEQ            reduce using rule 76 (termp -> TIMES push_operator term .)
    EQ              reduce using rule 76 (termp -> TIMES push_operator term .)
    NEQ             reduce using rule 76 (termp -> TIMES push_operator term .)
    AND             reduce using rule 76 (termp -> TIMES push_operator term .)
    OR              reduce using rule 76 (termp -> TIMES push_operator term .)
    SEMMICOLON      reduce using rule 76 (termp -> TIMES push_operator term .)
    RSQUARE         reduce using rule 76 (termp -> TIMES push_operator term .)
    RPAREN          reduce using rule 76 (termp -> TIMES push_operator term .)


state 185

    (56) sexprima -> AND push_operator sexp .

    SEMMICOLON      reduce using rule 56 (sexprima -> AND push_operator sexp .)
    RPAREN          reduce using rule 56 (sexprima -> AND push_operator sexp .)


state 186

    (57) sexprima -> OR push_operator sexp .

    SEMMICOLON      reduce using rule 57 (sexprima -> OR push_operator sexp .)
    RPAREN          reduce using rule 57 (sexprima -> OR push_operator sexp .)


state 187

    (70) expp -> PLUS push_operator exp .

    LT              reduce using rule 70 (expp -> PLUS push_operator exp .)
    GT              reduce using rule 70 (expp -> PLUS push_operator exp .)
    LTEQ            reduce using rule 70 (expp -> PLUS push_operator exp .)
    GTEQ            reduce using rule 70 (expp -> PLUS push_operator exp .)
    EQ              reduce using rule 70 (expp -> PLUS push_operator exp .)
    NEQ             reduce using rule 70 (expp -> PLUS push_operator exp .)
    AND             reduce using rule 70 (expp -> PLUS push_operator exp .)
    OR              reduce using rule 70 (expp -> PLUS push_operator exp .)
    SEMMICOLON      reduce using rule 70 (expp -> PLUS push_operator exp .)
    RSQUARE         reduce using rule 70 (expp -> PLUS push_operator exp .)
    RPAREN          reduce using rule 70 (expp -> PLUS push_operator exp .)


state 188

    (71) expp -> MINUS push_operator exp .

    LT              reduce using rule 71 (expp -> MINUS push_operator exp .)
    GT              reduce using rule 71 (expp -> MINUS push_operator exp .)
    LTEQ            reduce using rule 71 (expp -> MINUS push_operator exp .)
    GTEQ            reduce using rule 71 (expp -> MINUS push_operator exp .)
    EQ              reduce using rule 71 (expp -> MINUS push_operator exp .)
    NEQ             reduce using rule 71 (expp -> MINUS push_operator exp .)
    AND             reduce using rule 71 (expp -> MINUS push_operator exp .)
    OR              reduce using rule 71 (expp -> MINUS push_operator exp .)
    SEMMICOLON      reduce using rule 71 (expp -> MINUS push_operator exp .)
    RSQUARE         reduce using rule 71 (expp -> MINUS push_operator exp .)
    RPAREN          reduce using rule 71 (expp -> MINUS push_operator exp .)


state 189

    (62) expressionp -> GT push_operator expression .

    AND             reduce using rule 62 (expressionp -> GT push_operator expression .)
    OR              reduce using rule 62 (expressionp -> GT push_operator expression .)
    SEMMICOLON      reduce using rule 62 (expressionp -> GT push_operator expression .)
    RSQUARE         reduce using rule 62 (expressionp -> GT push_operator expression .)
    RPAREN          reduce using rule 62 (expressionp -> GT push_operator expression .)


state 190

    (64) expressionp -> GTEQ push_operator expression .

    AND             reduce using rule 64 (expressionp -> GTEQ push_operator expression .)
    OR              reduce using rule 64 (expressionp -> GTEQ push_operator expression .)
    SEMMICOLON      reduce using rule 64 (expressionp -> GTEQ push_operator expression .)
    RSQUARE         reduce using rule 64 (expressionp -> GTEQ push_operator expression .)
    RPAREN          reduce using rule 64 (expressionp -> GTEQ push_operator expression .)


state 191

    (65) expressionp -> EQ push_operator expression .

    AND             reduce using rule 65 (expressionp -> EQ push_operator expression .)
    OR              reduce using rule 65 (expressionp -> EQ push_operator expression .)
    SEMMICOLON      reduce using rule 65 (expressionp -> EQ push_operator expression .)
    RSQUARE         reduce using rule 65 (expressionp -> EQ push_operator expression .)
    RPAREN          reduce using rule 65 (expressionp -> EQ push_operator expression .)


state 192

    (63) expressionp -> LTEQ push_operator expression .

    AND             reduce using rule 63 (expressionp -> LTEQ push_operator expression .)
    OR              reduce using rule 63 (expressionp -> LTEQ push_operator expression .)
    SEMMICOLON      reduce using rule 63 (expressionp -> LTEQ push_operator expression .)
    RSQUARE         reduce using rule 63 (expressionp -> LTEQ push_operator expression .)
    RPAREN          reduce using rule 63 (expressionp -> LTEQ push_operator expression .)


state 193

    (61) expressionp -> LT push_operator expression .

    AND             reduce using rule 61 (expressionp -> LT push_operator expression .)
    OR              reduce using rule 61 (expressionp -> LT push_operator expression .)
    SEMMICOLON      reduce using rule 61 (expressionp -> LT push_operator expression .)
    RSQUARE         reduce using rule 61 (expressionp -> LT push_operator expression .)
    RPAREN          reduce using rule 61 (expressionp -> LT push_operator expression .)


state 194

    (66) expressionp -> NEQ push_operator expression .

    AND             reduce using rule 66 (expressionp -> NEQ push_operator expression .)
    OR              reduce using rule 66 (expressionp -> NEQ push_operator expression .)
    SEMMICOLON      reduce using rule 66 (expressionp -> NEQ push_operator expression .)
    RSQUARE         reduce using rule 66 (expressionp -> NEQ push_operator expression .)
    RPAREN          reduce using rule 66 (expressionp -> NEQ push_operator expression .)


state 195

    (80) factor -> LPAREN push_operator sexp RPAREN . pop_parentesis
    (82) pop_parentesis -> .

    DIVISION        reduce using rule 82 (pop_parentesis -> .)
    TIMES           reduce using rule 82 (pop_parentesis -> .)
    PLUS            reduce using rule 82 (pop_parentesis -> .)
    MINUS           reduce using rule 82 (pop_parentesis -> .)
    LT              reduce using rule 82 (pop_parentesis -> .)
    GT              reduce using rule 82 (pop_parentesis -> .)
    LTEQ            reduce using rule 82 (pop_parentesis -> .)
    GTEQ            reduce using rule 82 (pop_parentesis -> .)
    EQ              reduce using rule 82 (pop_parentesis -> .)
    NEQ             reduce using rule 82 (pop_parentesis -> .)
    AND             reduce using rule 82 (pop_parentesis -> .)
    OR              reduce using rule 82 (pop_parentesis -> .)
    SEMMICOLON      reduce using rule 82 (pop_parentesis -> .)
    RSQUARE         reduce using rule 82 (pop_parentesis -> .)
    RPAREN          reduce using rule 82 (pop_parentesis -> .)

    pop_parentesis                 shift and go to state 202

state 196

    (44) id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression . RSQUARE ASSIGN sexp SEMMICOLON

    RSQUARE         shift and go to state 203


state 197

    (43) id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN sexp . SEMMICOLON

    SEMMICOLON      shift and go to state 204


state 198

    (45) ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON . sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    sexp                           shift and go to state 205
    cons                           shift and go to state 100
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 114
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 199

    (49) ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY . estatuto RKEY if_else
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 206
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    print_process                  shift and go to state 69
    id_asignacion                  shift and go to state 65
    call_process                   shift and go to state 72
    empty                          shift and go to state 66

state 200

    (46) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY . estatuto RKEY
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 207
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    print_process                  shift and go to state 69
    id_asignacion                  shift and go to state 65
    call_process                   shift and go to state 72
    empty                          shift and go to state 66

state 201

    (37) print_prima_1 -> COMMA print_prima_2 print_1 .

    RPAREN          reduce using rule 37 (print_prima_1 -> COMMA print_prima_2 print_1 .)


state 202

    (80) factor -> LPAREN push_operator sexp RPAREN pop_parentesis .

    DIVISION        reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    TIMES           reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    PLUS            reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    MINUS           reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    LT              reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    GT              reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    LTEQ            reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    GTEQ            reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    EQ              reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    NEQ             reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    AND             reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    OR              reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    SEMMICOLON      reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    RSQUARE         reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)
    RPAREN          reduce using rule 80 (factor -> LPAREN push_operator sexp RPAREN pop_parentesis .)


state 203

    (44) id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE . ASSIGN sexp SEMMICOLON

    ASSIGN          shift and go to state 208


state 204

    (43) id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .

    FOR             reduce using rule 43 (id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    IF              reduce using rule 43 (id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    WHILE           reduce using rule 43 (id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    READ            reduce using rule 43 (id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    PRINT           reduce using rule 43 (id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    CALL            reduce using rule 43 (id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    ID              reduce using rule 43 (id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    RKEY            reduce using rule 43 (id_asignacion_prima -> LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)


state 205

    (45) ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp . SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY

    SEMMICOLON      shift and go to state 209


state 206

    (49) ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto . RKEY if_else

    RKEY            shift and go to state 210


state 207

    (46) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto . RKEY

    RKEY            shift and go to state 211


state 208

    (44) id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN . sexp SEMMICOLON
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMMICOLON      reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cons                           shift and go to state 100
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    sexp                           shift and go to state 212
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 114
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 209

    (45) ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON . ID ASSIGN sexp RPAREN LKEY estatuto RKEY

    ID              shift and go to state 213


state 210

    (49) ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY . if_else
    (51) if_else -> . ELSE LKEY if_else_1 estatuto RKEY
    (52) if_else -> . empty
    (90) empty -> .

    ELSE            shift and go to state 214
    FOR             reduce using rule 90 (empty -> .)
    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    PRINT           reduce using rule 90 (empty -> .)
    CALL            reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RKEY            reduce using rule 90 (empty -> .)

    if_else                        shift and go to state 215
    empty                          shift and go to state 216

state 211

    (46) ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .

    FOR             reduce using rule 46 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    IF              reduce using rule 46 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    WHILE           reduce using rule 46 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    READ            reduce using rule 46 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    PRINT           reduce using rule 46 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    CALL            reduce using rule 46 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    ID              reduce using rule 46 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)
    RKEY            reduce using rule 46 (ciclo_while -> WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY .)


state 212

    (44) id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp . SEMMICOLON

    SEMMICOLON      shift and go to state 217


state 213

    (45) ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID . ASSIGN sexp RPAREN LKEY estatuto RKEY

    ASSIGN          shift and go to state 218


state 214

    (51) if_else -> ELSE . LKEY if_else_1 estatuto RKEY

    LKEY            shift and go to state 219


state 215

    (49) ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .

    FOR             reduce using rule 49 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    IF              reduce using rule 49 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    WHILE           reduce using rule 49 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    READ            reduce using rule 49 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    PRINT           reduce using rule 49 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    CALL            reduce using rule 49 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    ID              reduce using rule 49 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)
    RKEY            reduce using rule 49 (ciclo_if -> IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else .)


state 216

    (52) if_else -> empty .

    FOR             reduce using rule 52 (if_else -> empty .)
    IF              reduce using rule 52 (if_else -> empty .)
    WHILE           reduce using rule 52 (if_else -> empty .)
    READ            reduce using rule 52 (if_else -> empty .)
    PRINT           reduce using rule 52 (if_else -> empty .)
    CALL            reduce using rule 52 (if_else -> empty .)
    ID              reduce using rule 52 (if_else -> empty .)
    RKEY            reduce using rule 52 (if_else -> empty .)


state 217

    (44) id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .

    FOR             reduce using rule 44 (id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    IF              reduce using rule 44 (id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    WHILE           reduce using rule 44 (id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    READ            reduce using rule 44 (id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    PRINT           reduce using rule 44 (id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    CALL            reduce using rule 44 (id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    ID              reduce using rule 44 (id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)
    RKEY            reduce using rule 44 (id_asignacion_prima -> LSQUARE expression RSQUARE LSQUARE expression RSQUARE ASSIGN sexp SEMMICOLON .)


state 218

    (45) ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN . sexp RPAREN LKEY estatuto RKEY
    (54) sexp -> . cuadruplo_1 sexprima
    (55) cuadruplo_1 -> . expression
    (59) expression -> . cuadruplo_2 expressionp
    (60) cuadruplo_2 -> . exp
    (68) exp -> . cuadruplo_3 expp
    (69) cuadruplo_3 -> . term
    (73) term -> . cuadruplo_4 termp
    (74) cuadruplo_4 -> . factor
    (79) factor -> . cons
    (80) factor -> . LPAREN push_operator sexp RPAREN pop_parentesis
    (81) factor -> . empty
    (83) cons -> . id
    (84) cons -> . NUMINT int_type
    (85) cons -> . NUMFLOAT float_type
    (90) empty -> .
    (89) id -> . ID

    LPAREN          shift and go to state 110
    NUMINT          shift and go to state 112
    NUMFLOAT        shift and go to state 101
    DIVISION        reduce using rule 90 (empty -> .)
    TIMES           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LTEQ            reduce using rule 90 (empty -> .)
    GTEQ            reduce using rule 90 (empty -> .)
    EQ              reduce using rule 90 (empty -> .)
    NEQ             reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    term                           shift and go to state 111
    cuadruplo_4                    shift and go to state 103
    cuadruplo_1                    shift and go to state 104
    cuadruplo_3                    shift and go to state 105
    cuadruplo_2                    shift and go to state 106
    sexp                           shift and go to state 220
    cons                           shift and go to state 100
    exp                            shift and go to state 113
    factor                         shift and go to state 107
    expression                     shift and go to state 114
    id                             shift and go to state 102
    empty                          shift and go to state 108

state 219

    (51) if_else -> ELSE LKEY . if_else_1 estatuto RKEY
    (53) if_else_1 -> .

    FOR             reduce using rule 53 (if_else_1 -> .)
    IF              reduce using rule 53 (if_else_1 -> .)
    WHILE           reduce using rule 53 (if_else_1 -> .)
    READ            reduce using rule 53 (if_else_1 -> .)
    PRINT           reduce using rule 53 (if_else_1 -> .)
    CALL            reduce using rule 53 (if_else_1 -> .)
    ID              reduce using rule 53 (if_else_1 -> .)
    RKEY            reduce using rule 53 (if_else_1 -> .)

    if_else_1                      shift and go to state 221

state 220

    (45) ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp . RPAREN LKEY estatuto RKEY

    RPAREN          shift and go to state 222


state 221

    (51) if_else -> ELSE LKEY if_else_1 . estatuto RKEY
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 223
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    call_process                   shift and go to state 72
    id_asignacion                  shift and go to state 65
    print_process                  shift and go to state 69
    empty                          shift and go to state 66

state 222

    (45) ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN . LKEY estatuto RKEY

    LKEY            shift and go to state 224


state 223

    (51) if_else -> ELSE LKEY if_else_1 estatuto . RKEY

    RKEY            shift and go to state 225


state 224

    (45) ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY . estatuto RKEY
    (23) estatuto -> . ciclo_for estatuto
    (24) estatuto -> . ciclo_if estatuto
    (25) estatuto -> . ciclo_while estatuto
    (26) estatuto -> . read_process estatuto
    (27) estatuto -> . print_process estatuto
    (28) estatuto -> . call_process estatuto
    (29) estatuto -> . id_asignacion estatuto
    (30) estatuto -> . empty
    (45) ciclo_for -> . FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY
    (49) ciclo_if -> . IF LPAREN sexp RPAREN ciclo_if_1 LKEY estatuto RKEY if_else
    (46) ciclo_while -> . WHILE ciclo_while_1 LPAREN sexp RPAREN ciclo_while_2 LKEY estatuto RKEY
    (40) read_process -> . READ LPAREN sexp RPAREN SEMMICOLON
    (32) print_process -> . PRINT LPAREN print_1 RPAREN SEMMICOLON
    (31) call_process -> . CALL ID LPAREN RPAREN SEMMICOLON
    (41) id_asignacion -> . id id_asignacion_prima
    (90) empty -> .
    (89) id -> . ID

    FOR             shift and go to state 67
    IF              shift and go to state 71
    WHILE           shift and go to state 59
    READ            shift and go to state 63
    PRINT           shift and go to state 60
    CALL            shift and go to state 64
    RKEY            reduce using rule 90 (empty -> .)
    ID              shift and go to state 70

    ciclo_for                      shift and go to state 56
    read_process                   shift and go to state 57
    ciclo_while                    shift and go to state 58
    estatuto                       shift and go to state 226
    id                             shift and go to state 61
    ciclo_if                       shift and go to state 68
    print_process                  shift and go to state 69
    id_asignacion                  shift and go to state 65
    call_process                   shift and go to state 72
    empty                          shift and go to state 66

state 225

    (51) if_else -> ELSE LKEY if_else_1 estatuto RKEY .

    FOR             reduce using rule 51 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    IF              reduce using rule 51 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    WHILE           reduce using rule 51 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    READ            reduce using rule 51 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    PRINT           reduce using rule 51 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    CALL            reduce using rule 51 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    ID              reduce using rule 51 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)
    RKEY            reduce using rule 51 (if_else -> ELSE LKEY if_else_1 estatuto RKEY .)


state 226

    (45) ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto . RKEY

    RKEY            shift and go to state 227


state 227

    (45) ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY .

    FOR             reduce using rule 45 (ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY .)
    IF              reduce using rule 45 (ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY .)
    WHILE           reduce using rule 45 (ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY .)
    READ            reduce using rule 45 (ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY .)
    PRINT           reduce using rule 45 (ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY .)
    CALL            reduce using rule 45 (ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY .)
    ID              reduce using rule 45 (ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY .)
    RKEY            reduce using rule 45 (ciclo_for -> FOR LPAREN ID ASSIGN sexp SEMMICOLON sexp SEMMICOLON ID ASSIGN sexp RPAREN LKEY estatuto RKEY .)

